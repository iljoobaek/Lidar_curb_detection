// Generated by gencpp from file automotive_platform_msgs/UserInputADAS.msg
// DO NOT EDIT!


#ifndef AUTOMOTIVE_PLATFORM_MSGS_MESSAGE_USERINPUTADAS_H
#define AUTOMOTIVE_PLATFORM_MSGS_MESSAGE_USERINPUTADAS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace automotive_platform_msgs
{
template <class ContainerAllocator>
struct UserInputADAS_
{
  typedef UserInputADAS_<ContainerAllocator> Type;

  UserInputADAS_()
    : header()
    , btn_cc_on(false)
    , btn_cc_off(false)
    , btn_cc_on_off(false)
    , btn_cc_set_inc(false)
    , btn_cc_set_dec(false)
    , btn_cc_res(false)
    , btn_cc_cncl(false)
    , btn_cc_res_cncl(false)
    , btn_acc_gap_inc(false)
    , btn_acc_gap_dec(false)
    , btn_lka_on(false)
    , btn_lka_off(false)
    , btn_lka_on_off(false)  {
    }
  UserInputADAS_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , btn_cc_on(false)
    , btn_cc_off(false)
    , btn_cc_on_off(false)
    , btn_cc_set_inc(false)
    , btn_cc_set_dec(false)
    , btn_cc_res(false)
    , btn_cc_cncl(false)
    , btn_cc_res_cncl(false)
    , btn_acc_gap_inc(false)
    , btn_acc_gap_dec(false)
    , btn_lka_on(false)
    , btn_lka_off(false)
    , btn_lka_on_off(false)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _btn_cc_on_type;
  _btn_cc_on_type btn_cc_on;

   typedef uint8_t _btn_cc_off_type;
  _btn_cc_off_type btn_cc_off;

   typedef uint8_t _btn_cc_on_off_type;
  _btn_cc_on_off_type btn_cc_on_off;

   typedef uint8_t _btn_cc_set_inc_type;
  _btn_cc_set_inc_type btn_cc_set_inc;

   typedef uint8_t _btn_cc_set_dec_type;
  _btn_cc_set_dec_type btn_cc_set_dec;

   typedef uint8_t _btn_cc_res_type;
  _btn_cc_res_type btn_cc_res;

   typedef uint8_t _btn_cc_cncl_type;
  _btn_cc_cncl_type btn_cc_cncl;

   typedef uint8_t _btn_cc_res_cncl_type;
  _btn_cc_res_cncl_type btn_cc_res_cncl;

   typedef uint8_t _btn_acc_gap_inc_type;
  _btn_acc_gap_inc_type btn_acc_gap_inc;

   typedef uint8_t _btn_acc_gap_dec_type;
  _btn_acc_gap_dec_type btn_acc_gap_dec;

   typedef uint8_t _btn_lka_on_type;
  _btn_lka_on_type btn_lka_on;

   typedef uint8_t _btn_lka_off_type;
  _btn_lka_off_type btn_lka_off;

   typedef uint8_t _btn_lka_on_off_type;
  _btn_lka_on_off_type btn_lka_on_off;





  typedef boost::shared_ptr< ::automotive_platform_msgs::UserInputADAS_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::automotive_platform_msgs::UserInputADAS_<ContainerAllocator> const> ConstPtr;

}; // struct UserInputADAS_

typedef ::automotive_platform_msgs::UserInputADAS_<std::allocator<void> > UserInputADAS;

typedef boost::shared_ptr< ::automotive_platform_msgs::UserInputADAS > UserInputADASPtr;
typedef boost::shared_ptr< ::automotive_platform_msgs::UserInputADAS const> UserInputADASConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::automotive_platform_msgs::UserInputADAS_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::automotive_platform_msgs::UserInputADAS_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace automotive_platform_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'automotive_platform_msgs': ['/tmp/binarydeb/ros-kinetic-automotive-platform-msgs-3.0.3/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::automotive_platform_msgs::UserInputADAS_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::automotive_platform_msgs::UserInputADAS_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::automotive_platform_msgs::UserInputADAS_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::automotive_platform_msgs::UserInputADAS_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::automotive_platform_msgs::UserInputADAS_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::automotive_platform_msgs::UserInputADAS_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::automotive_platform_msgs::UserInputADAS_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7e781a180633792b238750d67dd1490f";
  }

  static const char* value(const ::automotive_platform_msgs::UserInputADAS_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7e781a180633792bULL;
  static const uint64_t static_value2 = 0x238750d67dd1490fULL;
};

template<class ContainerAllocator>
struct DataType< ::automotive_platform_msgs::UserInputADAS_<ContainerAllocator> >
{
  static const char* value()
  {
    return "automotive_platform_msgs/UserInputADAS";
  }

  static const char* value(const ::automotive_platform_msgs::UserInputADAS_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::automotive_platform_msgs::UserInputADAS_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# User input (e.g. button presses) related to the factory ADAS functions\n\
std_msgs/Header header\n\
\n\
bool btn_cc_on          # Cruise Control on\n\
bool btn_cc_off         # Cruise Control off\n\
bool btn_cc_on_off      # Cruise Control on/off toggle\n\
bool btn_cc_set_inc     # Cruise Control set/speed +\n\
bool btn_cc_set_dec     # Cruise Control set/speed -\n\
bool btn_cc_res         # Cruise Control resume\n\
bool btn_cc_cncl        # Cruise Control cancel\n\
bool btn_cc_res_cncl    # Cruise Control resume/cancle toggle\n\
bool btn_acc_gap_inc    # Adaptive Cruise Control gap -\n\
bool btn_acc_gap_dec    # Adaptive Cruise Control gap +\n\
bool btn_lka_on         # Lane Keep Assist off\n\
bool btn_lka_off        # Lane Keep Assist on\n\
bool btn_lka_on_off     # Lane Keep Assist on/off toggle\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::automotive_platform_msgs::UserInputADAS_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::automotive_platform_msgs::UserInputADAS_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.btn_cc_on);
      stream.next(m.btn_cc_off);
      stream.next(m.btn_cc_on_off);
      stream.next(m.btn_cc_set_inc);
      stream.next(m.btn_cc_set_dec);
      stream.next(m.btn_cc_res);
      stream.next(m.btn_cc_cncl);
      stream.next(m.btn_cc_res_cncl);
      stream.next(m.btn_acc_gap_inc);
      stream.next(m.btn_acc_gap_dec);
      stream.next(m.btn_lka_on);
      stream.next(m.btn_lka_off);
      stream.next(m.btn_lka_on_off);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct UserInputADAS_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::automotive_platform_msgs::UserInputADAS_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::automotive_platform_msgs::UserInputADAS_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "btn_cc_on: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.btn_cc_on);
    s << indent << "btn_cc_off: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.btn_cc_off);
    s << indent << "btn_cc_on_off: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.btn_cc_on_off);
    s << indent << "btn_cc_set_inc: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.btn_cc_set_inc);
    s << indent << "btn_cc_set_dec: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.btn_cc_set_dec);
    s << indent << "btn_cc_res: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.btn_cc_res);
    s << indent << "btn_cc_cncl: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.btn_cc_cncl);
    s << indent << "btn_cc_res_cncl: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.btn_cc_res_cncl);
    s << indent << "btn_acc_gap_inc: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.btn_acc_gap_inc);
    s << indent << "btn_acc_gap_dec: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.btn_acc_gap_dec);
    s << indent << "btn_lka_on: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.btn_lka_on);
    s << indent << "btn_lka_off: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.btn_lka_off);
    s << indent << "btn_lka_on_off: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.btn_lka_on_off);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AUTOMOTIVE_PLATFORM_MSGS_MESSAGE_USERINPUTADAS_H
