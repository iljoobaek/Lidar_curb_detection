// Generated by message_relay for processing frame IDs in std_srvs messages and services.
// DO NOT EDIT


#ifndef MESSAGE_RELAY_STD_SRVS_MESSAGE_PROCESSOR_H
#define MESSAGE_RELAY_STD_SRVS_MESSAGE_PROCESSOR_H

#include "message_relay/processor/message_processor.h"


#include "std_srvs/Empty.h"
#include "std_srvs/SetBool.h"
#include "std_srvs/Trigger.h"

namespace message_relay
{

template<>
void ServiceProcessor<std_srvs::Trigger, FrameIdProcessor>::processRequest(std_srvs::Trigger::Request &req, FrameIdProcessor::ConstPtr &frame_id_processor);

template<>
void ServiceProcessor<std_srvs::Trigger, FrameIdProcessor>::processResponse(std_srvs::Trigger::Response &res, FrameIdProcessor::ConstPtr &frame_id_processor);

template<>
void ServiceProcessor<std_srvs::Empty, FrameIdProcessor>::processRequest(std_srvs::Empty::Request &req, FrameIdProcessor::ConstPtr &frame_id_processor);

template<>
void ServiceProcessor<std_srvs::Empty, FrameIdProcessor>::processResponse(std_srvs::Empty::Response &res, FrameIdProcessor::ConstPtr &frame_id_processor);

template<>
void ServiceProcessor<std_srvs::SetBool, FrameIdProcessor>::processRequest(std_srvs::SetBool::Request &req, FrameIdProcessor::ConstPtr &frame_id_processor);

template<>
void ServiceProcessor<std_srvs::SetBool, FrameIdProcessor>::processResponse(std_srvs::SetBool::Response &res, FrameIdProcessor::ConstPtr &frame_id_processor);

template<>
void ServiceProcessor<std_srvs::Trigger, TimeProcessor>::processRequest(std_srvs::Trigger::Request &req, TimeProcessor::ConstPtr &time_processor);

template<>
void ServiceProcessor<std_srvs::Trigger, TimeProcessor>::processResponse(std_srvs::Trigger::Response &res, TimeProcessor::ConstPtr &time_processor);

template<>
void ServiceProcessor<std_srvs::Empty, TimeProcessor>::processRequest(std_srvs::Empty::Request &req, TimeProcessor::ConstPtr &time_processor);

template<>
void ServiceProcessor<std_srvs::Empty, TimeProcessor>::processResponse(std_srvs::Empty::Response &res, TimeProcessor::ConstPtr &time_processor);

template<>
void ServiceProcessor<std_srvs::SetBool, TimeProcessor>::processRequest(std_srvs::SetBool::Request &req, TimeProcessor::ConstPtr &time_processor);

template<>
void ServiceProcessor<std_srvs::SetBool, TimeProcessor>::processResponse(std_srvs::SetBool::Response &res, TimeProcessor::ConstPtr &time_processor);

}  // namespace message_relay

#endif // MESSAGE_RELAY_STD_SRVS_MESSAGE_PROCESSOR_H
