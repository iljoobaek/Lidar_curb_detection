// Generated by message_relay for processing frame IDs in robot_localization messages and services.
// DO NOT EDIT


#ifndef MESSAGE_RELAY_ROBOT_LOCALIZATION_MESSAGE_PROCESSOR_H
#define MESSAGE_RELAY_ROBOT_LOCALIZATION_MESSAGE_PROCESSOR_H

#include "message_relay/processor/message_processor.h"


#include "robot_localization/GetState.h"
#include "robot_localization/SetDatum.h"
#include "robot_localization/SetPose.h"
#include "robot_localization/ToggleFilterProcessing.h"

namespace message_relay
{

template<>
void ServiceProcessor<robot_localization::SetPose, FrameIdProcessor>::processRequest(robot_localization::SetPose::Request &req, FrameIdProcessor::ConstPtr &frame_id_processor);

template<>
void ServiceProcessor<robot_localization::SetPose, FrameIdProcessor>::processResponse(robot_localization::SetPose::Response &res, FrameIdProcessor::ConstPtr &frame_id_processor);

template<>
void ServiceProcessor<robot_localization::SetDatum, FrameIdProcessor>::processRequest(robot_localization::SetDatum::Request &req, FrameIdProcessor::ConstPtr &frame_id_processor);

template<>
void ServiceProcessor<robot_localization::SetDatum, FrameIdProcessor>::processResponse(robot_localization::SetDatum::Response &res, FrameIdProcessor::ConstPtr &frame_id_processor);

template<>
void ServiceProcessor<robot_localization::GetState, FrameIdProcessor>::processRequest(robot_localization::GetState::Request &req, FrameIdProcessor::ConstPtr &frame_id_processor);

template<>
void ServiceProcessor<robot_localization::GetState, FrameIdProcessor>::processResponse(robot_localization::GetState::Response &res, FrameIdProcessor::ConstPtr &frame_id_processor);

template<>
void ServiceProcessor<robot_localization::ToggleFilterProcessing, FrameIdProcessor>::processRequest(robot_localization::ToggleFilterProcessing::Request &req, FrameIdProcessor::ConstPtr &frame_id_processor);

template<>
void ServiceProcessor<robot_localization::ToggleFilterProcessing, FrameIdProcessor>::processResponse(robot_localization::ToggleFilterProcessing::Response &res, FrameIdProcessor::ConstPtr &frame_id_processor);

template<>
void ServiceProcessor<robot_localization::SetPose, TimeProcessor>::processRequest(robot_localization::SetPose::Request &req, TimeProcessor::ConstPtr &time_processor);

template<>
void ServiceProcessor<robot_localization::SetPose, TimeProcessor>::processResponse(robot_localization::SetPose::Response &res, TimeProcessor::ConstPtr &time_processor);

template<>
void ServiceProcessor<robot_localization::SetDatum, TimeProcessor>::processRequest(robot_localization::SetDatum::Request &req, TimeProcessor::ConstPtr &time_processor);

template<>
void ServiceProcessor<robot_localization::SetDatum, TimeProcessor>::processResponse(robot_localization::SetDatum::Response &res, TimeProcessor::ConstPtr &time_processor);

template<>
void ServiceProcessor<robot_localization::GetState, TimeProcessor>::processRequest(robot_localization::GetState::Request &req, TimeProcessor::ConstPtr &time_processor);

template<>
void ServiceProcessor<robot_localization::GetState, TimeProcessor>::processResponse(robot_localization::GetState::Response &res, TimeProcessor::ConstPtr &time_processor);

template<>
void ServiceProcessor<robot_localization::ToggleFilterProcessing, TimeProcessor>::processRequest(robot_localization::ToggleFilterProcessing::Request &req, TimeProcessor::ConstPtr &time_processor);

template<>
void ServiceProcessor<robot_localization::ToggleFilterProcessing, TimeProcessor>::processResponse(robot_localization::ToggleFilterProcessing::Response &res, TimeProcessor::ConstPtr &time_processor);

}  // namespace message_relay

#endif // MESSAGE_RELAY_ROBOT_LOCALIZATION_MESSAGE_PROCESSOR_H
