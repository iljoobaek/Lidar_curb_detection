// Generated by message_relay for processing frame IDs in controller_manager_msgs messages and services.
// DO NOT EDIT


#ifndef MESSAGE_RELAY_CONTROLLER_MANAGER_MSGS_MESSAGE_PROCESSOR_H
#define MESSAGE_RELAY_CONTROLLER_MANAGER_MSGS_MESSAGE_PROCESSOR_H

#include "message_relay/processor/message_processor.h"

#include "controller_manager_msgs/ControllerState.h"
#include "controller_manager_msgs/ControllerStatistics.h"
#include "controller_manager_msgs/ControllersStatistics.h"
#include "controller_manager_msgs/HardwareInterfaceResources.h"

#include "controller_manager_msgs/ListControllerTypes.h"
#include "controller_manager_msgs/ListControllers.h"
#include "controller_manager_msgs/LoadController.h"
#include "controller_manager_msgs/ReloadControllerLibraries.h"
#include "controller_manager_msgs/SwitchController.h"
#include "controller_manager_msgs/UnloadController.h"

namespace message_relay
{

template<>
void MessageProcessor<controller_manager_msgs::ControllerState, FrameIdProcessor>::processMessage(controller_manager_msgs::ControllerState::Ptr &msg, FrameIdProcessor::ConstPtr &frame_id_processor);

template<>
void MessageProcessor<controller_manager_msgs::ControllerStatistics, FrameIdProcessor>::processMessage(controller_manager_msgs::ControllerStatistics::Ptr &msg, FrameIdProcessor::ConstPtr &frame_id_processor);

template<>
void MessageProcessor<controller_manager_msgs::HardwareInterfaceResources, FrameIdProcessor>::processMessage(controller_manager_msgs::HardwareInterfaceResources::Ptr &msg, FrameIdProcessor::ConstPtr &frame_id_processor);

template<>
void MessageProcessor<controller_manager_msgs::ControllersStatistics, FrameIdProcessor>::processMessage(controller_manager_msgs::ControllersStatistics::Ptr &msg, FrameIdProcessor::ConstPtr &frame_id_processor);

template<>
void ServiceProcessor<controller_manager_msgs::ListControllers, FrameIdProcessor>::processRequest(controller_manager_msgs::ListControllers::Request &req, FrameIdProcessor::ConstPtr &frame_id_processor);

template<>
void ServiceProcessor<controller_manager_msgs::ListControllers, FrameIdProcessor>::processResponse(controller_manager_msgs::ListControllers::Response &res, FrameIdProcessor::ConstPtr &frame_id_processor);

template<>
void ServiceProcessor<controller_manager_msgs::ReloadControllerLibraries, FrameIdProcessor>::processRequest(controller_manager_msgs::ReloadControllerLibraries::Request &req, FrameIdProcessor::ConstPtr &frame_id_processor);

template<>
void ServiceProcessor<controller_manager_msgs::ReloadControllerLibraries, FrameIdProcessor>::processResponse(controller_manager_msgs::ReloadControllerLibraries::Response &res, FrameIdProcessor::ConstPtr &frame_id_processor);

template<>
void ServiceProcessor<controller_manager_msgs::SwitchController, FrameIdProcessor>::processRequest(controller_manager_msgs::SwitchController::Request &req, FrameIdProcessor::ConstPtr &frame_id_processor);

template<>
void ServiceProcessor<controller_manager_msgs::SwitchController, FrameIdProcessor>::processResponse(controller_manager_msgs::SwitchController::Response &res, FrameIdProcessor::ConstPtr &frame_id_processor);

template<>
void ServiceProcessor<controller_manager_msgs::UnloadController, FrameIdProcessor>::processRequest(controller_manager_msgs::UnloadController::Request &req, FrameIdProcessor::ConstPtr &frame_id_processor);

template<>
void ServiceProcessor<controller_manager_msgs::UnloadController, FrameIdProcessor>::processResponse(controller_manager_msgs::UnloadController::Response &res, FrameIdProcessor::ConstPtr &frame_id_processor);

template<>
void ServiceProcessor<controller_manager_msgs::ListControllerTypes, FrameIdProcessor>::processRequest(controller_manager_msgs::ListControllerTypes::Request &req, FrameIdProcessor::ConstPtr &frame_id_processor);

template<>
void ServiceProcessor<controller_manager_msgs::ListControllerTypes, FrameIdProcessor>::processResponse(controller_manager_msgs::ListControllerTypes::Response &res, FrameIdProcessor::ConstPtr &frame_id_processor);

template<>
void ServiceProcessor<controller_manager_msgs::LoadController, FrameIdProcessor>::processRequest(controller_manager_msgs::LoadController::Request &req, FrameIdProcessor::ConstPtr &frame_id_processor);

template<>
void ServiceProcessor<controller_manager_msgs::LoadController, FrameIdProcessor>::processResponse(controller_manager_msgs::LoadController::Response &res, FrameIdProcessor::ConstPtr &frame_id_processor);

template<>
void MessageProcessor<controller_manager_msgs::ControllerState, TimeProcessor>::processMessage(controller_manager_msgs::ControllerState::Ptr &msg, TimeProcessor::ConstPtr &time_processor);

template<>
void MessageProcessor<controller_manager_msgs::ControllerStatistics, TimeProcessor>::processMessage(controller_manager_msgs::ControllerStatistics::Ptr &msg, TimeProcessor::ConstPtr &time_processor);

template<>
void MessageProcessor<controller_manager_msgs::HardwareInterfaceResources, TimeProcessor>::processMessage(controller_manager_msgs::HardwareInterfaceResources::Ptr &msg, TimeProcessor::ConstPtr &time_processor);

template<>
void MessageProcessor<controller_manager_msgs::ControllersStatistics, TimeProcessor>::processMessage(controller_manager_msgs::ControllersStatistics::Ptr &msg, TimeProcessor::ConstPtr &time_processor);

template<>
void ServiceProcessor<controller_manager_msgs::ListControllers, TimeProcessor>::processRequest(controller_manager_msgs::ListControllers::Request &req, TimeProcessor::ConstPtr &time_processor);

template<>
void ServiceProcessor<controller_manager_msgs::ListControllers, TimeProcessor>::processResponse(controller_manager_msgs::ListControllers::Response &res, TimeProcessor::ConstPtr &time_processor);

template<>
void ServiceProcessor<controller_manager_msgs::ReloadControllerLibraries, TimeProcessor>::processRequest(controller_manager_msgs::ReloadControllerLibraries::Request &req, TimeProcessor::ConstPtr &time_processor);

template<>
void ServiceProcessor<controller_manager_msgs::ReloadControllerLibraries, TimeProcessor>::processResponse(controller_manager_msgs::ReloadControllerLibraries::Response &res, TimeProcessor::ConstPtr &time_processor);

template<>
void ServiceProcessor<controller_manager_msgs::SwitchController, TimeProcessor>::processRequest(controller_manager_msgs::SwitchController::Request &req, TimeProcessor::ConstPtr &time_processor);

template<>
void ServiceProcessor<controller_manager_msgs::SwitchController, TimeProcessor>::processResponse(controller_manager_msgs::SwitchController::Response &res, TimeProcessor::ConstPtr &time_processor);

template<>
void ServiceProcessor<controller_manager_msgs::UnloadController, TimeProcessor>::processRequest(controller_manager_msgs::UnloadController::Request &req, TimeProcessor::ConstPtr &time_processor);

template<>
void ServiceProcessor<controller_manager_msgs::UnloadController, TimeProcessor>::processResponse(controller_manager_msgs::UnloadController::Response &res, TimeProcessor::ConstPtr &time_processor);

template<>
void ServiceProcessor<controller_manager_msgs::ListControllerTypes, TimeProcessor>::processRequest(controller_manager_msgs::ListControllerTypes::Request &req, TimeProcessor::ConstPtr &time_processor);

template<>
void ServiceProcessor<controller_manager_msgs::ListControllerTypes, TimeProcessor>::processResponse(controller_manager_msgs::ListControllerTypes::Response &res, TimeProcessor::ConstPtr &time_processor);

template<>
void ServiceProcessor<controller_manager_msgs::LoadController, TimeProcessor>::processRequest(controller_manager_msgs::LoadController::Request &req, TimeProcessor::ConstPtr &time_processor);

template<>
void ServiceProcessor<controller_manager_msgs::LoadController, TimeProcessor>::processResponse(controller_manager_msgs::LoadController::Response &res, TimeProcessor::ConstPtr &time_processor);

}  // namespace message_relay

#endif // MESSAGE_RELAY_CONTROLLER_MANAGER_MSGS_MESSAGE_PROCESSOR_H
