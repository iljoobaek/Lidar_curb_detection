// Generated by gencpp from file pacmod_msgs/SystemRptInt.msg
// DO NOT EDIT!


#ifndef PACMOD_MSGS_MESSAGE_SYSTEMRPTINT_H
#define PACMOD_MSGS_MESSAGE_SYSTEMRPTINT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace pacmod_msgs
{
template <class ContainerAllocator>
struct SystemRptInt_
{
  typedef SystemRptInt_<ContainerAllocator> Type;

  SystemRptInt_()
    : header()
    , enabled(false)
    , override_active(false)
    , command_output_fault(false)
    , input_output_fault(false)
    , output_reported_fault(false)
    , pacmod_fault(false)
    , vehicle_fault(false)
    , manual_input(0)
    , command(0)
    , output(0)  {
    }
  SystemRptInt_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , enabled(false)
    , override_active(false)
    , command_output_fault(false)
    , input_output_fault(false)
    , output_reported_fault(false)
    , pacmod_fault(false)
    , vehicle_fault(false)
    , manual_input(0)
    , command(0)
    , output(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _enabled_type;
  _enabled_type enabled;

   typedef uint8_t _override_active_type;
  _override_active_type override_active;

   typedef uint8_t _command_output_fault_type;
  _command_output_fault_type command_output_fault;

   typedef uint8_t _input_output_fault_type;
  _input_output_fault_type input_output_fault;

   typedef uint8_t _output_reported_fault_type;
  _output_reported_fault_type output_reported_fault;

   typedef uint8_t _pacmod_fault_type;
  _pacmod_fault_type pacmod_fault;

   typedef uint8_t _vehicle_fault_type;
  _vehicle_fault_type vehicle_fault;

   typedef uint16_t _manual_input_type;
  _manual_input_type manual_input;

   typedef uint16_t _command_type;
  _command_type command;

   typedef uint16_t _output_type;
  _output_type output;



  enum {
    CRUISE_CONTROL_NONE = 0u,
    CRUISE_CONTROL_CNCL = 1u,
    CRUISE_CONTROL_ACC_FURTHER = 2u,
    CRUISE_CONTROL_ACC_CLOSER = 3u,
    CRUISE_CONTROL_SET_DEC = 4u,
    CRUISE_CONTROL_RES_INC = 5u,
    DASH_CONTROL_NONE = 0u,
    DASH_CONTROL_OK = 1u,
    DASH_CONTROL_LEFT = 2u,
    DASH_CONTROL_RIGHT = 3u,
    DASH_CONTROL_UP = 4u,
    DASH_CONTROL_DOWN = 5u,
    HEADLIGHTS_OFF = 0u,
    HEADLIGHTS_PARKING_ONLY = 1u,
    HEADLIGHTS_MANUAL_LOW = 2u,
    HEADLIGHTS_MANUAL_HIGH = 3u,
    HEADLIGHTS_AUTO_LOW = 4u,
    HEADLIGHTS_AUTO_HIGH = 5u,
    MEDIA_CONTROL_NONE = 0u,
    MEDIA_CONTROL_VOICE_COMMAND = 1u,
    MEDIA_CONTROL_MUTE = 2u,
    MEDIA_CONTROL_PREV_TRACK_ANSWER = 3u,
    MEDIA_CONTROL_NEXT_TRACK_HANG_UP = 4u,
    MEDIA_CONTROL_VOL_UP = 5u,
    MEDIA_CONTROL_VOL_DOWN = 6u,
    SHIFT_PARK = 0u,
    SHIFT_REVERSE = 1u,
    SHIFT_NEUTRAL = 2u,
    SHIFT_HIGH = 3u,
    SHIFT_FORWARD = 3u,
    SHIFT_LOW = 4u,
    SHIFT_BETWEEN_GEARS = 5u,
    SHIFT_ERROR = 6u,
    SHIFT_NONE = 7u,
    TURN_RIGHT = 0u,
    TURN_NONE = 1u,
    TURN_LEFT = 2u,
    TURN_HAZARDS = 3u,
    DOOR_NEUTRAL = 0u,
    DOOR_OPEN = 1u,
    DOOR_CLOSE = 2u,
    WIPERS_OFF = 0u,
    WIPERS_INT_1 = 1u,
    WIPERS_INT_2 = 2u,
    WIPERS_INT_3 = 3u,
    WIPERS_INT_4 = 4u,
    WIPERS_INT_5 = 5u,
    WIPERS_INT_6 = 6u,
    WIPERS_MEDIUM = 7u,
    WIPERS_HIGH = 8u,
  };


  typedef boost::shared_ptr< ::pacmod_msgs::SystemRptInt_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pacmod_msgs::SystemRptInt_<ContainerAllocator> const> ConstPtr;

}; // struct SystemRptInt_

typedef ::pacmod_msgs::SystemRptInt_<std::allocator<void> > SystemRptInt;

typedef boost::shared_ptr< ::pacmod_msgs::SystemRptInt > SystemRptIntPtr;
typedef boost::shared_ptr< ::pacmod_msgs::SystemRptInt const> SystemRptIntConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pacmod_msgs::SystemRptInt_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pacmod_msgs::SystemRptInt_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace pacmod_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'pacmod_msgs': ['/tmp/binarydeb/ros-kinetic-pacmod-msgs-3.0.1/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::pacmod_msgs::SystemRptInt_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pacmod_msgs::SystemRptInt_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pacmod_msgs::SystemRptInt_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pacmod_msgs::SystemRptInt_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pacmod_msgs::SystemRptInt_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pacmod_msgs::SystemRptInt_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pacmod_msgs::SystemRptInt_<ContainerAllocator> >
{
  static const char* value()
  {
    return "da718c3df94de6df3ce729dd13078d8a";
  }

  static const char* value(const ::pacmod_msgs::SystemRptInt_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xda718c3df94de6dfULL;
  static const uint64_t static_value2 = 0x3ce729dd13078d8aULL;
};

template<class ContainerAllocator>
struct DataType< ::pacmod_msgs::SystemRptInt_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pacmod_msgs/SystemRptInt";
  }

  static const char* value(const ::pacmod_msgs::SystemRptInt_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pacmod_msgs::SystemRptInt_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n\
\n\
bool enabled\n\
bool override_active\n\
bool command_output_fault\n\
bool input_output_fault\n\
bool output_reported_fault\n\
bool pacmod_fault\n\
bool vehicle_fault\n\
\n\
uint16 manual_input\n\
uint16 command\n\
uint16 output\n\
\n\
uint16 CRUISE_CONTROL_NONE = 0\n\
uint16 CRUISE_CONTROL_CNCL = 1\n\
uint16 CRUISE_CONTROL_ACC_FURTHER = 2\n\
uint16 CRUISE_CONTROL_ACC_CLOSER = 3\n\
uint16 CRUISE_CONTROL_SET_DEC = 4\n\
uint16 CRUISE_CONTROL_RES_INC = 5\n\
\n\
uint16 DASH_CONTROL_NONE = 0\n\
uint16 DASH_CONTROL_OK = 1\n\
uint16 DASH_CONTROL_LEFT = 2\n\
uint16 DASH_CONTROL_RIGHT = 3\n\
uint16 DASH_CONTROL_UP = 4\n\
uint16 DASH_CONTROL_DOWN = 5\n\
\n\
uint16 HEADLIGHTS_OFF = 0\n\
uint16 HEADLIGHTS_PARKING_ONLY = 1\n\
uint16 HEADLIGHTS_MANUAL_LOW = 2\n\
uint16 HEADLIGHTS_MANUAL_HIGH = 3\n\
uint16 HEADLIGHTS_AUTO_LOW = 4\n\
uint16 HEADLIGHTS_AUTO_HIGH = 5\n\
\n\
uint16 MEDIA_CONTROL_NONE = 0\n\
uint16 MEDIA_CONTROL_VOICE_COMMAND = 1\n\
uint16 MEDIA_CONTROL_MUTE = 2\n\
uint16 MEDIA_CONTROL_PREV_TRACK_ANSWER = 3\n\
uint16 MEDIA_CONTROL_NEXT_TRACK_HANG_UP = 4\n\
uint16 MEDIA_CONTROL_VOL_UP = 5\n\
uint16 MEDIA_CONTROL_VOL_DOWN = 6\n\
\n\
uint16 SHIFT_PARK = 0\n\
uint16 SHIFT_REVERSE = 1\n\
uint16 SHIFT_NEUTRAL = 2\n\
uint16 SHIFT_HIGH = 3\n\
uint16 SHIFT_FORWARD = 3\n\
uint16 SHIFT_LOW = 4\n\
uint16 SHIFT_BETWEEN_GEARS = 5\n\
uint16 SHIFT_ERROR = 6\n\
uint16 SHIFT_NONE = 7\n\
\n\
uint16 TURN_RIGHT = 0\n\
uint16 TURN_NONE = 1\n\
uint16 TURN_LEFT = 2\n\
uint16 TURN_HAZARDS = 3\n\
\n\
uint16 DOOR_NEUTRAL = 0\n\
uint16 DOOR_OPEN = 1\n\
uint16 DOOR_CLOSE = 2\n\
\n\
uint16 WIPERS_OFF = 0\n\
uint16 WIPERS_INT_1 = 1\n\
uint16 WIPERS_INT_2 = 2\n\
uint16 WIPERS_INT_3 = 3\n\
uint16 WIPERS_INT_4 = 4\n\
uint16 WIPERS_INT_5 = 5\n\
uint16 WIPERS_INT_6 = 6\n\
uint16 WIPERS_MEDIUM = 7\n\
uint16 WIPERS_HIGH = 8\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::pacmod_msgs::SystemRptInt_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pacmod_msgs::SystemRptInt_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.enabled);
      stream.next(m.override_active);
      stream.next(m.command_output_fault);
      stream.next(m.input_output_fault);
      stream.next(m.output_reported_fault);
      stream.next(m.pacmod_fault);
      stream.next(m.vehicle_fault);
      stream.next(m.manual_input);
      stream.next(m.command);
      stream.next(m.output);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SystemRptInt_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pacmod_msgs::SystemRptInt_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pacmod_msgs::SystemRptInt_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "enabled: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.enabled);
    s << indent << "override_active: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.override_active);
    s << indent << "command_output_fault: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.command_output_fault);
    s << indent << "input_output_fault: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.input_output_fault);
    s << indent << "output_reported_fault: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.output_reported_fault);
    s << indent << "pacmod_fault: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.pacmod_fault);
    s << indent << "vehicle_fault: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.vehicle_fault);
    s << indent << "manual_input: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.manual_input);
    s << indent << "command: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.command);
    s << indent << "output: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.output);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PACMOD_MSGS_MESSAGE_SYSTEMRPTINT_H
