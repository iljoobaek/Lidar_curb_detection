// Generated by gencpp from file lgsvl_msgs/Detection2D.msg
// DO NOT EDIT!


#ifndef LGSVL_MSGS_MESSAGE_DETECTION2D_H
#define LGSVL_MSGS_MESSAGE_DETECTION2D_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <lgsvl_msgs/BoundingBox2D.h>
#include <geometry_msgs/Twist.h>

namespace lgsvl_msgs
{
template <class ContainerAllocator>
struct Detection2D_
{
  typedef Detection2D_<ContainerAllocator> Type;

  Detection2D_()
    : header()
    , id(0)
    , label()
    , score(0.0)
    , bbox()
    , velocity()  {
    }
  Detection2D_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , id(0)
    , label(_alloc)
    , score(0.0)
    , bbox(_alloc)
    , velocity(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint32_t _id_type;
  _id_type id;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _label_type;
  _label_type label;

   typedef float _score_type;
  _score_type score;

   typedef  ::lgsvl_msgs::BoundingBox2D_<ContainerAllocator>  _bbox_type;
  _bbox_type bbox;

   typedef  ::geometry_msgs::Twist_<ContainerAllocator>  _velocity_type;
  _velocity_type velocity;





  typedef boost::shared_ptr< ::lgsvl_msgs::Detection2D_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::lgsvl_msgs::Detection2D_<ContainerAllocator> const> ConstPtr;

}; // struct Detection2D_

typedef ::lgsvl_msgs::Detection2D_<std::allocator<void> > Detection2D;

typedef boost::shared_ptr< ::lgsvl_msgs::Detection2D > Detection2DPtr;
typedef boost::shared_ptr< ::lgsvl_msgs::Detection2D const> Detection2DConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::lgsvl_msgs::Detection2D_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::lgsvl_msgs::Detection2D_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace lgsvl_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'lgsvl_msgs': ['/tmp/binarydeb/ros-kinetic-lgsvl-msgs-0.0.2/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::lgsvl_msgs::Detection2D_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::lgsvl_msgs::Detection2D_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lgsvl_msgs::Detection2D_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lgsvl_msgs::Detection2D_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lgsvl_msgs::Detection2D_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lgsvl_msgs::Detection2D_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::lgsvl_msgs::Detection2D_<ContainerAllocator> >
{
  static const char* value()
  {
    return "08aa7006fffc056c9c7feca0485a7d10";
  }

  static const char* value(const ::lgsvl_msgs::Detection2D_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x08aa7006fffc056cULL;
  static const uint64_t static_value2 = 0x9c7feca0485a7d10ULL;
};

template<class ContainerAllocator>
struct DataType< ::lgsvl_msgs::Detection2D_<ContainerAllocator> >
{
  static const char* value()
  {
    return "lgsvl_msgs/Detection2D";
  }

  static const char* value(const ::lgsvl_msgs::Detection2D_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::lgsvl_msgs::Detection2D_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n\
uint32 id  # The numeric ID of the detected object\n\
string label  # car, pedestrian\n\
float32 score  # The confidence score of the detected object in the range [0-1]\n\
BoundingBox2D bbox  # A 2D bounding box\n\
geometry_msgs/Twist velocity  # Linear and angular velocity\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: lgsvl_msgs/BoundingBox2D\n\
float32 x  # x position of the bounding box center in camera image space, in pixels\n\
float32 y  # y position of the bounding box center in camera image space, in pixels\n\
float32 width  # width of the bounding box, in pixels\n\
float32 height  # height of the bounding box, in pixels\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Twist\n\
# This expresses velocity in free space broken into its linear and angular parts.\n\
Vector3  linear\n\
Vector3  angular\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
# It is only meant to represent a direction. Therefore, it does not\n\
# make sense to apply a translation to it (e.g., when applying a \n\
# generic rigid transformation to a Vector3, tf2 will only apply the\n\
# rotation). If you want your data to be translatable too, use the\n\
# geometry_msgs/Point message instead.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const ::lgsvl_msgs::Detection2D_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::lgsvl_msgs::Detection2D_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.id);
      stream.next(m.label);
      stream.next(m.score);
      stream.next(m.bbox);
      stream.next(m.velocity);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Detection2D_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::lgsvl_msgs::Detection2D_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::lgsvl_msgs::Detection2D_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "id: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.id);
    s << indent << "label: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.label);
    s << indent << "score: ";
    Printer<float>::stream(s, indent + "  ", v.score);
    s << indent << "bbox: ";
    s << std::endl;
    Printer< ::lgsvl_msgs::BoundingBox2D_<ContainerAllocator> >::stream(s, indent + "  ", v.bbox);
    s << indent << "velocity: ";
    s << std::endl;
    Printer< ::geometry_msgs::Twist_<ContainerAllocator> >::stream(s, indent + "  ", v.velocity);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LGSVL_MSGS_MESSAGE_DETECTION2D_H
