//#line 2 "/tmp/binarydeb/ros-kinetic-dynamic-reconfigure-1.5.50/templates/ConfigType.h.template"
// *********************************************************
//
// File autogenerated for the dynamic_reconfigure_test package
// by the dynamic_reconfigure package.
// Please do not edit.
//
// ********************************************************/

#ifndef __dynamic_reconfigure_test__TESTCONFIG_H__
#define __dynamic_reconfigure_test__TESTCONFIG_H__

#if __cplusplus >= 201103L
#define DYNAMIC_RECONFIGURE_FINAL final
#else
#define DYNAMIC_RECONFIGURE_FINAL
#endif

#include <dynamic_reconfigure/config_tools.h>
#include <limits>
#include <ros/node_handle.h>
#include <dynamic_reconfigure/ConfigDescription.h>
#include <dynamic_reconfigure/ParamDescription.h>
#include <dynamic_reconfigure/Group.h>
#include <dynamic_reconfigure/config_init_mutex.h>
#include <boost/any.hpp>

namespace dynamic_reconfigure_test
{
  class TestConfigStatics;

  class TestConfig
  {
  public:
    class AbstractParamDescription : public dynamic_reconfigure::ParamDescription
    {
    public:
      AbstractParamDescription(std::string n, std::string t, uint32_t l,
          std::string d, std::string e)
      {
        name = n;
        type = t;
        level = l;
        description = d;
        edit_method = e;
      }

      virtual void clamp(TestConfig &config, const TestConfig &max, const TestConfig &min) const = 0;
      virtual void calcLevel(uint32_t &level, const TestConfig &config1, const TestConfig &config2) const = 0;
      virtual void fromServer(const ros::NodeHandle &nh, TestConfig &config) const = 0;
      virtual void toServer(const ros::NodeHandle &nh, const TestConfig &config) const = 0;
      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, TestConfig &config) const = 0;
      virtual void toMessage(dynamic_reconfigure::Config &msg, const TestConfig &config) const = 0;
      virtual void getValue(const TestConfig &config, boost::any &val) const = 0;
    };

    typedef boost::shared_ptr<AbstractParamDescription> AbstractParamDescriptionPtr;
    typedef boost::shared_ptr<const AbstractParamDescription> AbstractParamDescriptionConstPtr;

    // Final keyword added to class because it has virtual methods and inherits
    // from a class with a non-virtual destructor.
    template <class T>
    class ParamDescription DYNAMIC_RECONFIGURE_FINAL : public AbstractParamDescription
    {
    public:
      ParamDescription(std::string a_name, std::string a_type, uint32_t a_level,
          std::string a_description, std::string a_edit_method, T TestConfig::* a_f) :
        AbstractParamDescription(a_name, a_type, a_level, a_description, a_edit_method),
        field(a_f)
      {}

      T (TestConfig::* field);

      virtual void clamp(TestConfig &config, const TestConfig &max, const TestConfig &min) const
      {
        if (config.*field > max.*field)
          config.*field = max.*field;

        if (config.*field < min.*field)
          config.*field = min.*field;
      }

      virtual void calcLevel(uint32_t &comb_level, const TestConfig &config1, const TestConfig &config2) const
      {
        if (config1.*field != config2.*field)
          comb_level |= level;
      }

      virtual void fromServer(const ros::NodeHandle &nh, TestConfig &config) const
      {
        nh.getParam(name, config.*field);
      }

      virtual void toServer(const ros::NodeHandle &nh, const TestConfig &config) const
      {
        nh.setParam(name, config.*field);
      }

      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, TestConfig &config) const
      {
        return dynamic_reconfigure::ConfigTools::getParameter(msg, name, config.*field);
      }

      virtual void toMessage(dynamic_reconfigure::Config &msg, const TestConfig &config) const
      {
        dynamic_reconfigure::ConfigTools::appendParameter(msg, name, config.*field);
      }

      virtual void getValue(const TestConfig &config, boost::any &val) const
      {
        val = config.*field;
      }
    };

    class AbstractGroupDescription : public dynamic_reconfigure::Group
    {
      public:
      AbstractGroupDescription(std::string n, std::string t, int p, int i, bool s)
      {
        name = n;
        type = t;
        parent = p;
        state = s;
        id = i;
      }

      std::vector<AbstractParamDescriptionConstPtr> abstract_parameters;
      bool state;

      virtual void toMessage(dynamic_reconfigure::Config &msg, const boost::any &config) const = 0;
      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, boost::any &config) const =0;
      virtual void updateParams(boost::any &cfg, TestConfig &top) const= 0;
      virtual void setInitialState(boost::any &cfg) const = 0;


      void convertParams()
      {
        for(std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = abstract_parameters.begin(); i != abstract_parameters.end(); ++i)
        {
          parameters.push_back(dynamic_reconfigure::ParamDescription(**i));
        }
      }
    };

    typedef boost::shared_ptr<AbstractGroupDescription> AbstractGroupDescriptionPtr;
    typedef boost::shared_ptr<const AbstractGroupDescription> AbstractGroupDescriptionConstPtr;

    // Final keyword added to class because it has virtual methods and inherits
    // from a class with a non-virtual destructor.
    template<class T, class PT>
    class GroupDescription DYNAMIC_RECONFIGURE_FINAL : public AbstractGroupDescription
    {
    public:
      GroupDescription(std::string a_name, std::string a_type, int a_parent, int a_id, bool a_s, T PT::* a_f) : AbstractGroupDescription(a_name, a_type, a_parent, a_id, a_s), field(a_f)
      {
      }

      GroupDescription(const GroupDescription<T, PT>& g): AbstractGroupDescription(g.name, g.type, g.parent, g.id, g.state), field(g.field), groups(g.groups)
      {
        parameters = g.parameters;
        abstract_parameters = g.abstract_parameters;
      }

      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, boost::any &cfg) const
      {
        PT* config = boost::any_cast<PT*>(cfg);
        if(!dynamic_reconfigure::ConfigTools::getGroupState(msg, name, (*config).*field))
          return false;

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = &((*config).*field);
          if(!(*i)->fromMessage(msg, n))
            return false;
        }

        return true;
      }

      virtual void setInitialState(boost::any &cfg) const
      {
        PT* config = boost::any_cast<PT*>(cfg);
        T* group = &((*config).*field);
        group->state = state;

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = boost::any(&((*config).*field));
          (*i)->setInitialState(n);
        }

      }

      virtual void updateParams(boost::any &cfg, TestConfig &top) const
      {
        PT* config = boost::any_cast<PT*>(cfg);

        T* f = &((*config).*field);
        f->setParams(top, abstract_parameters);

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = &((*config).*field);
          (*i)->updateParams(n, top);
        }
      }

      virtual void toMessage(dynamic_reconfigure::Config &msg, const boost::any &cfg) const
      {
        const PT config = boost::any_cast<PT>(cfg);
        dynamic_reconfigure::ConfigTools::appendGroup<T>(msg, name, id, parent, config.*field);

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          (*i)->toMessage(msg, config.*field);
        }
      }

      T (PT::* field);
      std::vector<TestConfig::AbstractGroupDescriptionConstPtr> groups;
    };

class DEFAULT
{
  public:
    DEFAULT()
    {
      state = true;
      name = "Default";
    }

    void setParams(TestConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("int_enum_"==(*_i)->name){int_enum_ = boost::any_cast<int>(val);}
        if("int_"==(*_i)->name){int_ = boost::any_cast<int>(val);}
        if("double_"==(*_i)->name){double_ = boost::any_cast<double>(val);}
        if("double_no_minmax"==(*_i)->name){double_no_minmax = boost::any_cast<double>(val);}
        if("double_no_max"==(*_i)->name){double_no_max = boost::any_cast<double>(val);}
        if("str_"==(*_i)->name){str_ = boost::any_cast<std::string>(val);}
        if("mstr_"==(*_i)->name){mstr_ = boost::any_cast<std::string>(val);}
        if("bool_"==(*_i)->name){bool_ = boost::any_cast<bool>(val);}
        if("level"==(*_i)->name){level = boost::any_cast<int>(val);}
        if("int_nodefault"==(*_i)->name){int_nodefault = boost::any_cast<int>(val);}
        if("i"==(*_i)->name){i = boost::any_cast<int>(val);}
      }
    }

    int int_enum_;
int int_;
double double_;
double double_no_minmax;
double double_no_max;
std::string str_;
std::string mstr_;
bool bool_;
int level;
int int_nodefault;
int i;

    bool state;
    std::string name;

    class GROUP_ONE
{
  public:
    GROUP_ONE()
    {
      state = true;
      name = "Group_One";
    }

    void setParams(TestConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("group1_int"==(*_i)->name){group1_int = boost::any_cast<int>(val);}
      }
    }

    int group1_int;

    bool state;
    std::string name;

    class GROUP2
{
  public:
    GROUP2()
    {
      state = true;
      name = "GROUP2";
    }

    void setParams(TestConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("group2_double"==(*_i)->name){group2_double = boost::any_cast<double>(val);}
        if("group2_string"==(*_i)->name){group2_string = boost::any_cast<std::string>(val);}
        if("some_other"==(*_i)->name){some_other = boost::any_cast<std::string>(val);}
        if("variable"==(*_i)->name){variable = boost::any_cast<bool>(val);}
      }
    }

    double group2_double;
std::string group2_string;
std::string some_other;
bool variable;

    bool state;
    std::string name;

    class GROUP3
{
  public:
    GROUP3()
    {
      state = true;
      name = "Group3";
    }

    void setParams(TestConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("deep_var_int"==(*_i)->name){deep_var_int = boost::any_cast<int>(val);}
        if("deep_var_bool"==(*_i)->name){deep_var_bool = boost::any_cast<bool>(val);}
        if("deep_var_double"==(*_i)->name){deep_var_double = boost::any_cast<double>(val);}
      }
    }

    int deep_var_int;
bool deep_var_bool;
double deep_var_double;

    bool state;
    std::string name;

    
}group3;

}group2;

}group_one;

class UPPER_GROUP_2
{
  public:
    UPPER_GROUP_2()
    {
      state = true;
      name = "Upper_Group_2";
    }

    void setParams(TestConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("some_param"==(*_i)->name){some_param = boost::any_cast<int>(val);}
      }
    }

    int some_param;

    bool state;
    std::string name;

    
}upper_group_2;

}groups;



//#line 290 "/tmp/binarydeb/ros-kinetic-dynamic-reconfigure-1.5.50/src/dynamic_reconfigure/parameter_generator_catkin.py"
      int int_enum_;
//#line 290 "/tmp/binarydeb/ros-kinetic-dynamic-reconfigure-1.5.50/src/dynamic_reconfigure/parameter_generator_catkin.py"
      int int_;
//#line 290 "/tmp/binarydeb/ros-kinetic-dynamic-reconfigure-1.5.50/src/dynamic_reconfigure/parameter_generator_catkin.py"
      double double_;
//#line 290 "/tmp/binarydeb/ros-kinetic-dynamic-reconfigure-1.5.50/src/dynamic_reconfigure/parameter_generator_catkin.py"
      double double_no_minmax;
//#line 290 "/tmp/binarydeb/ros-kinetic-dynamic-reconfigure-1.5.50/src/dynamic_reconfigure/parameter_generator_catkin.py"
      double double_no_max;
//#line 290 "/tmp/binarydeb/ros-kinetic-dynamic-reconfigure-1.5.50/src/dynamic_reconfigure/parameter_generator_catkin.py"
      std::string str_;
//#line 290 "/tmp/binarydeb/ros-kinetic-dynamic-reconfigure-1.5.50/src/dynamic_reconfigure/parameter_generator_catkin.py"
      std::string mstr_;
//#line 290 "/tmp/binarydeb/ros-kinetic-dynamic-reconfigure-1.5.50/src/dynamic_reconfigure/parameter_generator_catkin.py"
      bool bool_;
//#line 290 "/tmp/binarydeb/ros-kinetic-dynamic-reconfigure-1.5.50/src/dynamic_reconfigure/parameter_generator_catkin.py"
      int level;
//#line 290 "/tmp/binarydeb/ros-kinetic-dynamic-reconfigure-1.5.50/src/dynamic_reconfigure/parameter_generator_catkin.py"
      int int_nodefault;
//#line 290 "/tmp/binarydeb/ros-kinetic-dynamic-reconfigure-1.5.50/src/dynamic_reconfigure/parameter_generator_catkin.py"
      int i;
//#line 63 "/tmp/binarydeb/ros-kinetic-dynamic-reconfigure-1.5.50/cfg/Test.cfg"
      int group1_int;
//#line 65 "/tmp/binarydeb/ros-kinetic-dynamic-reconfigure-1.5.50/cfg/Test.cfg"
      double group2_double;
//#line 66 "/tmp/binarydeb/ros-kinetic-dynamic-reconfigure-1.5.50/cfg/Test.cfg"
      std::string group2_string;
//#line 67 "/tmp/binarydeb/ros-kinetic-dynamic-reconfigure-1.5.50/cfg/Test.cfg"
      std::string some_other;
//#line 68 "/tmp/binarydeb/ros-kinetic-dynamic-reconfigure-1.5.50/cfg/Test.cfg"
      bool variable;
//#line 70 "/tmp/binarydeb/ros-kinetic-dynamic-reconfigure-1.5.50/cfg/Test.cfg"
      int deep_var_int;
//#line 71 "/tmp/binarydeb/ros-kinetic-dynamic-reconfigure-1.5.50/cfg/Test.cfg"
      bool deep_var_bool;
//#line 72 "/tmp/binarydeb/ros-kinetic-dynamic-reconfigure-1.5.50/cfg/Test.cfg"
      double deep_var_double;
//#line 75 "/tmp/binarydeb/ros-kinetic-dynamic-reconfigure-1.5.50/cfg/Test.cfg"
      int some_param;
//#line 228 "/tmp/binarydeb/ros-kinetic-dynamic-reconfigure-1.5.50/templates/ConfigType.h.template"

    bool __fromMessage__(dynamic_reconfigure::Config &msg)
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();

      int count = 0;
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        if ((*i)->fromMessage(msg, *this))
          count++;

      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); i ++)
      {
        if ((*i)->id == 0)
        {
          boost::any n = boost::any(this);
          (*i)->updateParams(n, *this);
          (*i)->fromMessage(msg, n);
        }
      }

      if (count != dynamic_reconfigure::ConfigTools::size(msg))
      {
        ROS_ERROR("TestConfig::__fromMessage__ called with an unexpected parameter.");
        ROS_ERROR("Booleans:");
        for (unsigned int i = 0; i < msg.bools.size(); i++)
          ROS_ERROR("  %s", msg.bools[i].name.c_str());
        ROS_ERROR("Integers:");
        for (unsigned int i = 0; i < msg.ints.size(); i++)
          ROS_ERROR("  %s", msg.ints[i].name.c_str());
        ROS_ERROR("Doubles:");
        for (unsigned int i = 0; i < msg.doubles.size(); i++)
          ROS_ERROR("  %s", msg.doubles[i].name.c_str());
        ROS_ERROR("Strings:");
        for (unsigned int i = 0; i < msg.strs.size(); i++)
          ROS_ERROR("  %s", msg.strs[i].name.c_str());
        // @todo Check that there are no duplicates. Make this error more
        // explicit.
        return false;
      }
      return true;
    }

    // This version of __toMessage__ is used during initialization of
    // statics when __getParamDescriptions__ can't be called yet.
    void __toMessage__(dynamic_reconfigure::Config &msg, const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__, const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__) const
    {
      dynamic_reconfigure::ConfigTools::clear(msg);
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->toMessage(msg, *this);

      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); ++i)
      {
        if((*i)->id == 0)
        {
          (*i)->toMessage(msg, *this);
        }
      }
    }

    void __toMessage__(dynamic_reconfigure::Config &msg) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();
      __toMessage__(msg, __param_descriptions__, __group_descriptions__);
    }

    void __toServer__(const ros::NodeHandle &nh) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->toServer(nh, *this);
    }

    void __fromServer__(const ros::NodeHandle &nh)
    {
      static bool setup=false;

      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->fromServer(nh, *this);

      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();
      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); i++){
        if (!setup && (*i)->id == 0) {
          setup = true;
          boost::any n = boost::any(this);
          (*i)->setInitialState(n);
        }
      }
    }

    void __clamp__()
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const TestConfig &__max__ = __getMax__();
      const TestConfig &__min__ = __getMin__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->clamp(*this, __max__, __min__);
    }

    uint32_t __level__(const TestConfig &config) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      uint32_t level = 0;
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->calcLevel(level, config, *this);
      return level;
    }

    static const dynamic_reconfigure::ConfigDescription &__getDescriptionMessage__();
    static const TestConfig &__getDefault__();
    static const TestConfig &__getMax__();
    static const TestConfig &__getMin__();
    static const std::vector<AbstractParamDescriptionConstPtr> &__getParamDescriptions__();
    static const std::vector<AbstractGroupDescriptionConstPtr> &__getGroupDescriptions__();

  private:
    static const TestConfigStatics *__get_statics__();
  };

  template <> // Max and min are ignored for strings.
  inline void TestConfig::ParamDescription<std::string>::clamp(TestConfig &config, const TestConfig &max, const TestConfig &min) const
  {
    (void) config;
    (void) min;
    (void) max;
    return;
  }

  class TestConfigStatics
  {
    friend class TestConfig;

    TestConfigStatics()
    {
TestConfig::GroupDescription<TestConfig::DEFAULT, TestConfig> Default("Default", "", 0, 0, true, &TestConfig::groups);
//#line 290 "/tmp/binarydeb/ros-kinetic-dynamic-reconfigure-1.5.50/src/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.int_enum_ = 0;
//#line 290 "/tmp/binarydeb/ros-kinetic-dynamic-reconfigure-1.5.50/src/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.int_enum_ = 3;
//#line 290 "/tmp/binarydeb/ros-kinetic-dynamic-reconfigure-1.5.50/src/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.int_enum_ = 0;
//#line 290 "/tmp/binarydeb/ros-kinetic-dynamic-reconfigure-1.5.50/src/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(TestConfig::AbstractParamDescriptionConstPtr(new TestConfig::ParamDescription<int>("int_enum_", "int", 1, "Int enum", "{'enum_description': 'An enum to set the size.', 'enum': [{'srcline': 45, 'description': 'A small constant', 'srcfile': '/tmp/binarydeb/ros-kinetic-dynamic-reconfigure-1.5.50/cfg/Test.cfg', 'cconsttype': 'const int', 'value': 0, 'ctype': 'int', 'type': 'int', 'name': 'Small'}, {'srcline': 46, 'description': 'A medium value', 'srcfile': '/tmp/binarydeb/ros-kinetic-dynamic-reconfigure-1.5.50/cfg/Test.cfg', 'cconsttype': 'const int', 'value': 1, 'ctype': 'int', 'type': 'int', 'name': 'Medium'}, {'srcline': 47, 'description': 'A large value', 'srcfile': '/tmp/binarydeb/ros-kinetic-dynamic-reconfigure-1.5.50/cfg/Test.cfg', 'cconsttype': 'const int', 'value': 2, 'ctype': 'int', 'type': 'int', 'name': 'Large'}, {'srcline': 48, 'description': 'An extra large value', 'srcfile': '/tmp/binarydeb/ros-kinetic-dynamic-reconfigure-1.5.50/cfg/Test.cfg', 'cconsttype': 'const int', 'value': 3, 'ctype': 'int', 'type': 'int', 'name': 'ExtraLarge'}]}", &TestConfig::int_enum_)));
//#line 290 "/tmp/binarydeb/ros-kinetic-dynamic-reconfigure-1.5.50/src/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(TestConfig::AbstractParamDescriptionConstPtr(new TestConfig::ParamDescription<int>("int_enum_", "int", 1, "Int enum", "{'enum_description': 'An enum to set the size.', 'enum': [{'srcline': 45, 'description': 'A small constant', 'srcfile': '/tmp/binarydeb/ros-kinetic-dynamic-reconfigure-1.5.50/cfg/Test.cfg', 'cconsttype': 'const int', 'value': 0, 'ctype': 'int', 'type': 'int', 'name': 'Small'}, {'srcline': 46, 'description': 'A medium value', 'srcfile': '/tmp/binarydeb/ros-kinetic-dynamic-reconfigure-1.5.50/cfg/Test.cfg', 'cconsttype': 'const int', 'value': 1, 'ctype': 'int', 'type': 'int', 'name': 'Medium'}, {'srcline': 47, 'description': 'A large value', 'srcfile': '/tmp/binarydeb/ros-kinetic-dynamic-reconfigure-1.5.50/cfg/Test.cfg', 'cconsttype': 'const int', 'value': 2, 'ctype': 'int', 'type': 'int', 'name': 'Large'}, {'srcline': 48, 'description': 'An extra large value', 'srcfile': '/tmp/binarydeb/ros-kinetic-dynamic-reconfigure-1.5.50/cfg/Test.cfg', 'cconsttype': 'const int', 'value': 3, 'ctype': 'int', 'type': 'int', 'name': 'ExtraLarge'}]}", &TestConfig::int_enum_)));
//#line 290 "/tmp/binarydeb/ros-kinetic-dynamic-reconfigure-1.5.50/src/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.int_ = -10;
//#line 290 "/tmp/binarydeb/ros-kinetic-dynamic-reconfigure-1.5.50/src/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.int_ = 10;
//#line 290 "/tmp/binarydeb/ros-kinetic-dynamic-reconfigure-1.5.50/src/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.int_ = 0;
//#line 290 "/tmp/binarydeb/ros-kinetic-dynamic-reconfigure-1.5.50/src/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(TestConfig::AbstractParamDescriptionConstPtr(new TestConfig::ParamDescription<int>("int_", "int", 1, "Int parameter", "", &TestConfig::int_)));
//#line 290 "/tmp/binarydeb/ros-kinetic-dynamic-reconfigure-1.5.50/src/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(TestConfig::AbstractParamDescriptionConstPtr(new TestConfig::ParamDescription<int>("int_", "int", 1, "Int parameter", "", &TestConfig::int_)));
//#line 290 "/tmp/binarydeb/ros-kinetic-dynamic-reconfigure-1.5.50/src/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.double_ = -2.0;
//#line 290 "/tmp/binarydeb/ros-kinetic-dynamic-reconfigure-1.5.50/src/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.double_ = 10.0;
//#line 290 "/tmp/binarydeb/ros-kinetic-dynamic-reconfigure-1.5.50/src/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.double_ = 0.0;
//#line 290 "/tmp/binarydeb/ros-kinetic-dynamic-reconfigure-1.5.50/src/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(TestConfig::AbstractParamDescriptionConstPtr(new TestConfig::ParamDescription<double>("double_", "double", 2, "double parameter", "", &TestConfig::double_)));
//#line 290 "/tmp/binarydeb/ros-kinetic-dynamic-reconfigure-1.5.50/src/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(TestConfig::AbstractParamDescriptionConstPtr(new TestConfig::ParamDescription<double>("double_", "double", 2, "double parameter", "", &TestConfig::double_)));
//#line 290 "/tmp/binarydeb/ros-kinetic-dynamic-reconfigure-1.5.50/src/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.double_no_minmax = -std::numeric_limits<double>::infinity();
//#line 290 "/tmp/binarydeb/ros-kinetic-dynamic-reconfigure-1.5.50/src/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.double_no_minmax = std::numeric_limits<double>::infinity();
//#line 290 "/tmp/binarydeb/ros-kinetic-dynamic-reconfigure-1.5.50/src/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.double_no_minmax = 1.0;
//#line 290 "/tmp/binarydeb/ros-kinetic-dynamic-reconfigure-1.5.50/src/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(TestConfig::AbstractParamDescriptionConstPtr(new TestConfig::ParamDescription<double>("double_no_minmax", "double", 2, "double parameter without boundaries", "", &TestConfig::double_no_minmax)));
//#line 290 "/tmp/binarydeb/ros-kinetic-dynamic-reconfigure-1.5.50/src/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(TestConfig::AbstractParamDescriptionConstPtr(new TestConfig::ParamDescription<double>("double_no_minmax", "double", 2, "double parameter without boundaries", "", &TestConfig::double_no_minmax)));
//#line 290 "/tmp/binarydeb/ros-kinetic-dynamic-reconfigure-1.5.50/src/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.double_no_max = 0.0;
//#line 290 "/tmp/binarydeb/ros-kinetic-dynamic-reconfigure-1.5.50/src/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.double_no_max = std::numeric_limits<double>::infinity();
//#line 290 "/tmp/binarydeb/ros-kinetic-dynamic-reconfigure-1.5.50/src/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.double_no_max = 2.0;
//#line 290 "/tmp/binarydeb/ros-kinetic-dynamic-reconfigure-1.5.50/src/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(TestConfig::AbstractParamDescriptionConstPtr(new TestConfig::ParamDescription<double>("double_no_max", "double", 2, "double parameter without max value", "", &TestConfig::double_no_max)));
//#line 290 "/tmp/binarydeb/ros-kinetic-dynamic-reconfigure-1.5.50/src/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(TestConfig::AbstractParamDescriptionConstPtr(new TestConfig::ParamDescription<double>("double_no_max", "double", 2, "double parameter without max value", "", &TestConfig::double_no_max)));
//#line 290 "/tmp/binarydeb/ros-kinetic-dynamic-reconfigure-1.5.50/src/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.str_ = "";
//#line 290 "/tmp/binarydeb/ros-kinetic-dynamic-reconfigure-1.5.50/src/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.str_ = "";
//#line 290 "/tmp/binarydeb/ros-kinetic-dynamic-reconfigure-1.5.50/src/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.str_ = "foo";
//#line 290 "/tmp/binarydeb/ros-kinetic-dynamic-reconfigure-1.5.50/src/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(TestConfig::AbstractParamDescriptionConstPtr(new TestConfig::ParamDescription<std::string>("str_", "str", 4, "String parameter", "", &TestConfig::str_)));
//#line 290 "/tmp/binarydeb/ros-kinetic-dynamic-reconfigure-1.5.50/src/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(TestConfig::AbstractParamDescriptionConstPtr(new TestConfig::ParamDescription<std::string>("str_", "str", 4, "String parameter", "", &TestConfig::str_)));
//#line 290 "/tmp/binarydeb/ros-kinetic-dynamic-reconfigure-1.5.50/src/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.mstr_ = "";
//#line 290 "/tmp/binarydeb/ros-kinetic-dynamic-reconfigure-1.5.50/src/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.mstr_ = "";
//#line 290 "/tmp/binarydeb/ros-kinetic-dynamic-reconfigure-1.5.50/src/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.mstr_ = "bar";
//#line 290 "/tmp/binarydeb/ros-kinetic-dynamic-reconfigure-1.5.50/src/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(TestConfig::AbstractParamDescriptionConstPtr(new TestConfig::ParamDescription<std::string>("mstr_", "str", 4, "Multibyte String parameter", "", &TestConfig::mstr_)));
//#line 290 "/tmp/binarydeb/ros-kinetic-dynamic-reconfigure-1.5.50/src/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(TestConfig::AbstractParamDescriptionConstPtr(new TestConfig::ParamDescription<std::string>("mstr_", "str", 4, "Multibyte String parameter", "", &TestConfig::mstr_)));
//#line 290 "/tmp/binarydeb/ros-kinetic-dynamic-reconfigure-1.5.50/src/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.bool_ = 0;
//#line 290 "/tmp/binarydeb/ros-kinetic-dynamic-reconfigure-1.5.50/src/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.bool_ = 1;
//#line 290 "/tmp/binarydeb/ros-kinetic-dynamic-reconfigure-1.5.50/src/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.bool_ = 0;
//#line 290 "/tmp/binarydeb/ros-kinetic-dynamic-reconfigure-1.5.50/src/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(TestConfig::AbstractParamDescriptionConstPtr(new TestConfig::ParamDescription<bool>("bool_", "bool", 8, "Boolean parameter", "", &TestConfig::bool_)));
//#line 290 "/tmp/binarydeb/ros-kinetic-dynamic-reconfigure-1.5.50/src/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(TestConfig::AbstractParamDescriptionConstPtr(new TestConfig::ParamDescription<bool>("bool_", "bool", 8, "Boolean parameter", "", &TestConfig::bool_)));
//#line 290 "/tmp/binarydeb/ros-kinetic-dynamic-reconfigure-1.5.50/src/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.level = -2147483648;
//#line 290 "/tmp/binarydeb/ros-kinetic-dynamic-reconfigure-1.5.50/src/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.level = 2147483647;
//#line 290 "/tmp/binarydeb/ros-kinetic-dynamic-reconfigure-1.5.50/src/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.level = 0;
//#line 290 "/tmp/binarydeb/ros-kinetic-dynamic-reconfigure-1.5.50/src/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(TestConfig::AbstractParamDescriptionConstPtr(new TestConfig::ParamDescription<int>("level", "int", 16, "Contains the level of the previous change", "", &TestConfig::level)));
//#line 290 "/tmp/binarydeb/ros-kinetic-dynamic-reconfigure-1.5.50/src/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(TestConfig::AbstractParamDescriptionConstPtr(new TestConfig::ParamDescription<int>("level", "int", 16, "Contains the level of the previous change", "", &TestConfig::level)));
//#line 290 "/tmp/binarydeb/ros-kinetic-dynamic-reconfigure-1.5.50/src/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.int_nodefault = -2147483648;
//#line 290 "/tmp/binarydeb/ros-kinetic-dynamic-reconfigure-1.5.50/src/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.int_nodefault = 2147483647;
//#line 290 "/tmp/binarydeb/ros-kinetic-dynamic-reconfigure-1.5.50/src/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.int_nodefault = 0;
//#line 290 "/tmp/binarydeb/ros-kinetic-dynamic-reconfigure-1.5.50/src/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(TestConfig::AbstractParamDescriptionConstPtr(new TestConfig::ParamDescription<int>("int_nodefault", "int", 0, "Checks against regression of #4499", "", &TestConfig::int_nodefault)));
//#line 290 "/tmp/binarydeb/ros-kinetic-dynamic-reconfigure-1.5.50/src/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(TestConfig::AbstractParamDescriptionConstPtr(new TestConfig::ParamDescription<int>("int_nodefault", "int", 0, "Checks against regression of #4499", "", &TestConfig::int_nodefault)));
//#line 290 "/tmp/binarydeb/ros-kinetic-dynamic-reconfigure-1.5.50/src/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.i = -2147483648;
//#line 290 "/tmp/binarydeb/ros-kinetic-dynamic-reconfigure-1.5.50/src/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.i = 2147483647;
//#line 290 "/tmp/binarydeb/ros-kinetic-dynamic-reconfigure-1.5.50/src/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.i = 0;
//#line 290 "/tmp/binarydeb/ros-kinetic-dynamic-reconfigure-1.5.50/src/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(TestConfig::AbstractParamDescriptionConstPtr(new TestConfig::ParamDescription<int>("i", "int", 0, "Checks against regression of https://github.com/ros/dynamic_reconfigure/issues/6", "", &TestConfig::i)));
//#line 290 "/tmp/binarydeb/ros-kinetic-dynamic-reconfigure-1.5.50/src/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(TestConfig::AbstractParamDescriptionConstPtr(new TestConfig::ParamDescription<int>("i", "int", 0, "Checks against regression of https://github.com/ros/dynamic_reconfigure/issues/6", "", &TestConfig::i)));
TestConfig::GroupDescription<TestConfig::DEFAULT::GROUP_ONE, TestConfig::DEFAULT> Group_One("Group_One", "", 0, 1, true, &TestConfig::DEFAULT::group_one);
//#line 63 "/tmp/binarydeb/ros-kinetic-dynamic-reconfigure-1.5.50/cfg/Test.cfg"
      __min__.group1_int = -2147483648;
//#line 63 "/tmp/binarydeb/ros-kinetic-dynamic-reconfigure-1.5.50/cfg/Test.cfg"
      __max__.group1_int = 2147483647;
//#line 63 "/tmp/binarydeb/ros-kinetic-dynamic-reconfigure-1.5.50/cfg/Test.cfg"
      __default__.group1_int = 2;
//#line 63 "/tmp/binarydeb/ros-kinetic-dynamic-reconfigure-1.5.50/cfg/Test.cfg"
      Group_One.abstract_parameters.push_back(TestConfig::AbstractParamDescriptionConstPtr(new TestConfig::ParamDescription<int>("group1_int", "int", 1, "A second level group parameter", "", &TestConfig::group1_int)));
//#line 63 "/tmp/binarydeb/ros-kinetic-dynamic-reconfigure-1.5.50/cfg/Test.cfg"
      __param_descriptions__.push_back(TestConfig::AbstractParamDescriptionConstPtr(new TestConfig::ParamDescription<int>("group1_int", "int", 1, "A second level group parameter", "", &TestConfig::group1_int)));
TestConfig::GroupDescription<TestConfig::DEFAULT::GROUP_ONE::GROUP2, TestConfig::DEFAULT::GROUP_ONE> GROUP2("GROUP2", "collapse", 1, 2, false, &TestConfig::DEFAULT::GROUP_ONE::group2);
//#line 65 "/tmp/binarydeb/ros-kinetic-dynamic-reconfigure-1.5.50/cfg/Test.cfg"
      __min__.group2_double = -std::numeric_limits<double>::infinity();
//#line 65 "/tmp/binarydeb/ros-kinetic-dynamic-reconfigure-1.5.50/cfg/Test.cfg"
      __max__.group2_double = std::numeric_limits<double>::infinity();
//#line 65 "/tmp/binarydeb/ros-kinetic-dynamic-reconfigure-1.5.50/cfg/Test.cfg"
      __default__.group2_double = 3.333;
//#line 65 "/tmp/binarydeb/ros-kinetic-dynamic-reconfigure-1.5.50/cfg/Test.cfg"
      GROUP2.abstract_parameters.push_back(TestConfig::AbstractParamDescriptionConstPtr(new TestConfig::ParamDescription<double>("group2_double", "double", 0, "A third level group parameter", "", &TestConfig::group2_double)));
//#line 65 "/tmp/binarydeb/ros-kinetic-dynamic-reconfigure-1.5.50/cfg/Test.cfg"
      __param_descriptions__.push_back(TestConfig::AbstractParamDescriptionConstPtr(new TestConfig::ParamDescription<double>("group2_double", "double", 0, "A third level group parameter", "", &TestConfig::group2_double)));
//#line 66 "/tmp/binarydeb/ros-kinetic-dynamic-reconfigure-1.5.50/cfg/Test.cfg"
      __min__.group2_string = "";
//#line 66 "/tmp/binarydeb/ros-kinetic-dynamic-reconfigure-1.5.50/cfg/Test.cfg"
      __max__.group2_string = "";
//#line 66 "/tmp/binarydeb/ros-kinetic-dynamic-reconfigure-1.5.50/cfg/Test.cfg"
      __default__.group2_string = "test string";
//#line 66 "/tmp/binarydeb/ros-kinetic-dynamic-reconfigure-1.5.50/cfg/Test.cfg"
      GROUP2.abstract_parameters.push_back(TestConfig::AbstractParamDescriptionConstPtr(new TestConfig::ParamDescription<std::string>("group2_string", "str", 0, "A third level group parameter", "", &TestConfig::group2_string)));
//#line 66 "/tmp/binarydeb/ros-kinetic-dynamic-reconfigure-1.5.50/cfg/Test.cfg"
      __param_descriptions__.push_back(TestConfig::AbstractParamDescriptionConstPtr(new TestConfig::ParamDescription<std::string>("group2_string", "str", 0, "A third level group parameter", "", &TestConfig::group2_string)));
//#line 67 "/tmp/binarydeb/ros-kinetic-dynamic-reconfigure-1.5.50/cfg/Test.cfg"
      __min__.some_other = "";
//#line 67 "/tmp/binarydeb/ros-kinetic-dynamic-reconfigure-1.5.50/cfg/Test.cfg"
      __max__.some_other = "";
//#line 67 "/tmp/binarydeb/ros-kinetic-dynamic-reconfigure-1.5.50/cfg/Test.cfg"
      __default__.some_other = "AAAAAAGGHH";
//#line 67 "/tmp/binarydeb/ros-kinetic-dynamic-reconfigure-1.5.50/cfg/Test.cfg"
      GROUP2.abstract_parameters.push_back(TestConfig::AbstractParamDescriptionConstPtr(new TestConfig::ParamDescription<std::string>("some_other", "str", 0, "Something", "", &TestConfig::some_other)));
//#line 67 "/tmp/binarydeb/ros-kinetic-dynamic-reconfigure-1.5.50/cfg/Test.cfg"
      __param_descriptions__.push_back(TestConfig::AbstractParamDescriptionConstPtr(new TestConfig::ParamDescription<std::string>("some_other", "str", 0, "Something", "", &TestConfig::some_other)));
//#line 68 "/tmp/binarydeb/ros-kinetic-dynamic-reconfigure-1.5.50/cfg/Test.cfg"
      __min__.variable = 0;
//#line 68 "/tmp/binarydeb/ros-kinetic-dynamic-reconfigure-1.5.50/cfg/Test.cfg"
      __max__.variable = 1;
//#line 68 "/tmp/binarydeb/ros-kinetic-dynamic-reconfigure-1.5.50/cfg/Test.cfg"
      __default__.variable = 1;
//#line 68 "/tmp/binarydeb/ros-kinetic-dynamic-reconfigure-1.5.50/cfg/Test.cfg"
      GROUP2.abstract_parameters.push_back(TestConfig::AbstractParamDescriptionConstPtr(new TestConfig::ParamDescription<bool>("variable", "bool", 0, "A boolean", "", &TestConfig::variable)));
//#line 68 "/tmp/binarydeb/ros-kinetic-dynamic-reconfigure-1.5.50/cfg/Test.cfg"
      __param_descriptions__.push_back(TestConfig::AbstractParamDescriptionConstPtr(new TestConfig::ParamDescription<bool>("variable", "bool", 0, "A boolean", "", &TestConfig::variable)));
TestConfig::GroupDescription<TestConfig::DEFAULT::GROUP_ONE::GROUP2::GROUP3, TestConfig::DEFAULT::GROUP_ONE::GROUP2> Group3("Group3", "", 2, 3, true, &TestConfig::DEFAULT::GROUP_ONE::GROUP2::group3);
//#line 70 "/tmp/binarydeb/ros-kinetic-dynamic-reconfigure-1.5.50/cfg/Test.cfg"
      __min__.deep_var_int = 0;
//#line 70 "/tmp/binarydeb/ros-kinetic-dynamic-reconfigure-1.5.50/cfg/Test.cfg"
      __max__.deep_var_int = 3;
//#line 70 "/tmp/binarydeb/ros-kinetic-dynamic-reconfigure-1.5.50/cfg/Test.cfg"
      __default__.deep_var_int = 0;
//#line 70 "/tmp/binarydeb/ros-kinetic-dynamic-reconfigure-1.5.50/cfg/Test.cfg"
      Group3.abstract_parameters.push_back(TestConfig::AbstractParamDescriptionConstPtr(new TestConfig::ParamDescription<int>("deep_var_int", "int", 0, "Were very far down now", "{'enum_description': 'An enum to set the size.', 'enum': [{'srcline': 45, 'description': 'A small constant', 'srcfile': '/tmp/binarydeb/ros-kinetic-dynamic-reconfigure-1.5.50/cfg/Test.cfg', 'cconsttype': 'const int', 'value': 0, 'ctype': 'int', 'type': 'int', 'name': 'Small'}, {'srcline': 46, 'description': 'A medium value', 'srcfile': '/tmp/binarydeb/ros-kinetic-dynamic-reconfigure-1.5.50/cfg/Test.cfg', 'cconsttype': 'const int', 'value': 1, 'ctype': 'int', 'type': 'int', 'name': 'Medium'}, {'srcline': 47, 'description': 'A large value', 'srcfile': '/tmp/binarydeb/ros-kinetic-dynamic-reconfigure-1.5.50/cfg/Test.cfg', 'cconsttype': 'const int', 'value': 2, 'ctype': 'int', 'type': 'int', 'name': 'Large'}, {'srcline': 48, 'description': 'An extra large value', 'srcfile': '/tmp/binarydeb/ros-kinetic-dynamic-reconfigure-1.5.50/cfg/Test.cfg', 'cconsttype': 'const int', 'value': 3, 'ctype': 'int', 'type': 'int', 'name': 'ExtraLarge'}]}", &TestConfig::deep_var_int)));
//#line 70 "/tmp/binarydeb/ros-kinetic-dynamic-reconfigure-1.5.50/cfg/Test.cfg"
      __param_descriptions__.push_back(TestConfig::AbstractParamDescriptionConstPtr(new TestConfig::ParamDescription<int>("deep_var_int", "int", 0, "Were very far down now", "{'enum_description': 'An enum to set the size.', 'enum': [{'srcline': 45, 'description': 'A small constant', 'srcfile': '/tmp/binarydeb/ros-kinetic-dynamic-reconfigure-1.5.50/cfg/Test.cfg', 'cconsttype': 'const int', 'value': 0, 'ctype': 'int', 'type': 'int', 'name': 'Small'}, {'srcline': 46, 'description': 'A medium value', 'srcfile': '/tmp/binarydeb/ros-kinetic-dynamic-reconfigure-1.5.50/cfg/Test.cfg', 'cconsttype': 'const int', 'value': 1, 'ctype': 'int', 'type': 'int', 'name': 'Medium'}, {'srcline': 47, 'description': 'A large value', 'srcfile': '/tmp/binarydeb/ros-kinetic-dynamic-reconfigure-1.5.50/cfg/Test.cfg', 'cconsttype': 'const int', 'value': 2, 'ctype': 'int', 'type': 'int', 'name': 'Large'}, {'srcline': 48, 'description': 'An extra large value', 'srcfile': '/tmp/binarydeb/ros-kinetic-dynamic-reconfigure-1.5.50/cfg/Test.cfg', 'cconsttype': 'const int', 'value': 3, 'ctype': 'int', 'type': 'int', 'name': 'ExtraLarge'}]}", &TestConfig::deep_var_int)));
//#line 71 "/tmp/binarydeb/ros-kinetic-dynamic-reconfigure-1.5.50/cfg/Test.cfg"
      __min__.deep_var_bool = 0;
//#line 71 "/tmp/binarydeb/ros-kinetic-dynamic-reconfigure-1.5.50/cfg/Test.cfg"
      __max__.deep_var_bool = 1;
//#line 71 "/tmp/binarydeb/ros-kinetic-dynamic-reconfigure-1.5.50/cfg/Test.cfg"
      __default__.deep_var_bool = 1;
//#line 71 "/tmp/binarydeb/ros-kinetic-dynamic-reconfigure-1.5.50/cfg/Test.cfg"
      Group3.abstract_parameters.push_back(TestConfig::AbstractParamDescriptionConstPtr(new TestConfig::ParamDescription<bool>("deep_var_bool", "bool", 0, "Were even farther down now!!", "", &TestConfig::deep_var_bool)));
//#line 71 "/tmp/binarydeb/ros-kinetic-dynamic-reconfigure-1.5.50/cfg/Test.cfg"
      __param_descriptions__.push_back(TestConfig::AbstractParamDescriptionConstPtr(new TestConfig::ParamDescription<bool>("deep_var_bool", "bool", 0, "Were even farther down now!!", "", &TestConfig::deep_var_bool)));
//#line 72 "/tmp/binarydeb/ros-kinetic-dynamic-reconfigure-1.5.50/cfg/Test.cfg"
      __min__.deep_var_double = -std::numeric_limits<double>::infinity();
//#line 72 "/tmp/binarydeb/ros-kinetic-dynamic-reconfigure-1.5.50/cfg/Test.cfg"
      __max__.deep_var_double = std::numeric_limits<double>::infinity();
//#line 72 "/tmp/binarydeb/ros-kinetic-dynamic-reconfigure-1.5.50/cfg/Test.cfg"
      __default__.deep_var_double = -1.0;
//#line 72 "/tmp/binarydeb/ros-kinetic-dynamic-reconfigure-1.5.50/cfg/Test.cfg"
      Group3.abstract_parameters.push_back(TestConfig::AbstractParamDescriptionConstPtr(new TestConfig::ParamDescription<double>("deep_var_double", "double", 0, "Were super far down now!!", "", &TestConfig::deep_var_double)));
//#line 72 "/tmp/binarydeb/ros-kinetic-dynamic-reconfigure-1.5.50/cfg/Test.cfg"
      __param_descriptions__.push_back(TestConfig::AbstractParamDescriptionConstPtr(new TestConfig::ParamDescription<double>("deep_var_double", "double", 0, "Were super far down now!!", "", &TestConfig::deep_var_double)));
//#line 124 "/tmp/binarydeb/ros-kinetic-dynamic-reconfigure-1.5.50/src/dynamic_reconfigure/parameter_generator_catkin.py"
      Group3.convertParams();
//#line 124 "/tmp/binarydeb/ros-kinetic-dynamic-reconfigure-1.5.50/src/dynamic_reconfigure/parameter_generator_catkin.py"
      GROUP2.groups.push_back(TestConfig::AbstractGroupDescriptionConstPtr(new TestConfig::GroupDescription<TestConfig::DEFAULT::GROUP_ONE::GROUP2::GROUP3, TestConfig::DEFAULT::GROUP_ONE::GROUP2>(Group3)));
//#line 124 "/tmp/binarydeb/ros-kinetic-dynamic-reconfigure-1.5.50/src/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(TestConfig::AbstractGroupDescriptionConstPtr(new TestConfig::GroupDescription<TestConfig::DEFAULT::GROUP_ONE::GROUP2::GROUP3, TestConfig::DEFAULT::GROUP_ONE::GROUP2>(Group3)));
//#line 124 "/tmp/binarydeb/ros-kinetic-dynamic-reconfigure-1.5.50/src/dynamic_reconfigure/parameter_generator_catkin.py"
      GROUP2.convertParams();
//#line 124 "/tmp/binarydeb/ros-kinetic-dynamic-reconfigure-1.5.50/src/dynamic_reconfigure/parameter_generator_catkin.py"
      Group_One.groups.push_back(TestConfig::AbstractGroupDescriptionConstPtr(new TestConfig::GroupDescription<TestConfig::DEFAULT::GROUP_ONE::GROUP2, TestConfig::DEFAULT::GROUP_ONE>(GROUP2)));
//#line 124 "/tmp/binarydeb/ros-kinetic-dynamic-reconfigure-1.5.50/src/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(TestConfig::AbstractGroupDescriptionConstPtr(new TestConfig::GroupDescription<TestConfig::DEFAULT::GROUP_ONE::GROUP2, TestConfig::DEFAULT::GROUP_ONE>(GROUP2)));
//#line 124 "/tmp/binarydeb/ros-kinetic-dynamic-reconfigure-1.5.50/src/dynamic_reconfigure/parameter_generator_catkin.py"
      Group_One.convertParams();
//#line 124 "/tmp/binarydeb/ros-kinetic-dynamic-reconfigure-1.5.50/src/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.groups.push_back(TestConfig::AbstractGroupDescriptionConstPtr(new TestConfig::GroupDescription<TestConfig::DEFAULT::GROUP_ONE, TestConfig::DEFAULT>(Group_One)));
//#line 124 "/tmp/binarydeb/ros-kinetic-dynamic-reconfigure-1.5.50/src/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(TestConfig::AbstractGroupDescriptionConstPtr(new TestConfig::GroupDescription<TestConfig::DEFAULT::GROUP_ONE, TestConfig::DEFAULT>(Group_One)));
TestConfig::GroupDescription<TestConfig::DEFAULT::UPPER_GROUP_2, TestConfig::DEFAULT> Upper_Group_2("Upper_Group_2", "", 0, 4, true, &TestConfig::DEFAULT::upper_group_2);
//#line 75 "/tmp/binarydeb/ros-kinetic-dynamic-reconfigure-1.5.50/cfg/Test.cfg"
      __min__.some_param = -2147483648;
//#line 75 "/tmp/binarydeb/ros-kinetic-dynamic-reconfigure-1.5.50/cfg/Test.cfg"
      __max__.some_param = 2147483647;
//#line 75 "/tmp/binarydeb/ros-kinetic-dynamic-reconfigure-1.5.50/cfg/Test.cfg"
      __default__.some_param = 20;
//#line 75 "/tmp/binarydeb/ros-kinetic-dynamic-reconfigure-1.5.50/cfg/Test.cfg"
      Upper_Group_2.abstract_parameters.push_back(TestConfig::AbstractParamDescriptionConstPtr(new TestConfig::ParamDescription<int>("some_param", "int", 0, "Some param", "", &TestConfig::some_param)));
//#line 75 "/tmp/binarydeb/ros-kinetic-dynamic-reconfigure-1.5.50/cfg/Test.cfg"
      __param_descriptions__.push_back(TestConfig::AbstractParamDescriptionConstPtr(new TestConfig::ParamDescription<int>("some_param", "int", 0, "Some param", "", &TestConfig::some_param)));
//#line 124 "/tmp/binarydeb/ros-kinetic-dynamic-reconfigure-1.5.50/src/dynamic_reconfigure/parameter_generator_catkin.py"
      Upper_Group_2.convertParams();
//#line 124 "/tmp/binarydeb/ros-kinetic-dynamic-reconfigure-1.5.50/src/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.groups.push_back(TestConfig::AbstractGroupDescriptionConstPtr(new TestConfig::GroupDescription<TestConfig::DEFAULT::UPPER_GROUP_2, TestConfig::DEFAULT>(Upper_Group_2)));
//#line 124 "/tmp/binarydeb/ros-kinetic-dynamic-reconfigure-1.5.50/src/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(TestConfig::AbstractGroupDescriptionConstPtr(new TestConfig::GroupDescription<TestConfig::DEFAULT::UPPER_GROUP_2, TestConfig::DEFAULT>(Upper_Group_2)));
//#line 245 "/tmp/binarydeb/ros-kinetic-dynamic-reconfigure-1.5.50/src/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.convertParams();
//#line 245 "/tmp/binarydeb/ros-kinetic-dynamic-reconfigure-1.5.50/src/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(TestConfig::AbstractGroupDescriptionConstPtr(new TestConfig::GroupDescription<TestConfig::DEFAULT, TestConfig>(Default)));
//#line 366 "/tmp/binarydeb/ros-kinetic-dynamic-reconfigure-1.5.50/templates/ConfigType.h.template"

      for (std::vector<TestConfig::AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); ++i)
      {
        __description_message__.groups.push_back(**i);
      }
      __max__.__toMessage__(__description_message__.max, __param_descriptions__, __group_descriptions__);
      __min__.__toMessage__(__description_message__.min, __param_descriptions__, __group_descriptions__);
      __default__.__toMessage__(__description_message__.dflt, __param_descriptions__, __group_descriptions__);
    }
    std::vector<TestConfig::AbstractParamDescriptionConstPtr> __param_descriptions__;
    std::vector<TestConfig::AbstractGroupDescriptionConstPtr> __group_descriptions__;
    TestConfig __max__;
    TestConfig __min__;
    TestConfig __default__;
    dynamic_reconfigure::ConfigDescription __description_message__;

    static const TestConfigStatics *get_instance()
    {
      // Split this off in a separate function because I know that
      // instance will get initialized the first time get_instance is
      // called, and I am guaranteeing that get_instance gets called at
      // most once.
      static TestConfigStatics instance;
      return &instance;
    }
  };

  inline const dynamic_reconfigure::ConfigDescription &TestConfig::__getDescriptionMessage__()
  {
    return __get_statics__()->__description_message__;
  }

  inline const TestConfig &TestConfig::__getDefault__()
  {
    return __get_statics__()->__default__;
  }

  inline const TestConfig &TestConfig::__getMax__()
  {
    return __get_statics__()->__max__;
  }

  inline const TestConfig &TestConfig::__getMin__()
  {
    return __get_statics__()->__min__;
  }

  inline const std::vector<TestConfig::AbstractParamDescriptionConstPtr> &TestConfig::__getParamDescriptions__()
  {
    return __get_statics__()->__param_descriptions__;
  }

  inline const std::vector<TestConfig::AbstractGroupDescriptionConstPtr> &TestConfig::__getGroupDescriptions__()
  {
    return __get_statics__()->__group_descriptions__;
  }

  inline const TestConfigStatics *TestConfig::__get_statics__()
  {
    const static TestConfigStatics *statics;

    if (statics) // Common case
      return statics;

    boost::mutex::scoped_lock lock(dynamic_reconfigure::__init_mutex__);

    if (statics) // In case we lost a race.
      return statics;

    statics = TestConfigStatics::get_instance();

    return statics;
  }

//#line 40 "/tmp/binarydeb/ros-kinetic-dynamic-reconfigure-1.5.50/cfg/Test.cfg"
      const int Test_int_const = 5;
//#line 41 "/tmp/binarydeb/ros-kinetic-dynamic-reconfigure-1.5.50/cfg/Test.cfg"
      const double Test_double_const = 5.6;
//#line 42 "/tmp/binarydeb/ros-kinetic-dynamic-reconfigure-1.5.50/cfg/Test.cfg"
      const char * const Test_str_const = "foo";
//#line 43 "/tmp/binarydeb/ros-kinetic-dynamic-reconfigure-1.5.50/cfg/Test.cfg"
      const bool Test_bool_const = 1;
//#line 45 "/tmp/binarydeb/ros-kinetic-dynamic-reconfigure-1.5.50/cfg/Test.cfg"
      const int Test_Small = 0;
//#line 46 "/tmp/binarydeb/ros-kinetic-dynamic-reconfigure-1.5.50/cfg/Test.cfg"
      const int Test_Medium = 1;
//#line 47 "/tmp/binarydeb/ros-kinetic-dynamic-reconfigure-1.5.50/cfg/Test.cfg"
      const int Test_Large = 2;
//#line 48 "/tmp/binarydeb/ros-kinetic-dynamic-reconfigure-1.5.50/cfg/Test.cfg"
      const int Test_ExtraLarge = 3;
}

#undef DYNAMIC_RECONFIGURE_FINAL

#endif // __TESTRECONFIGURATOR_H__
