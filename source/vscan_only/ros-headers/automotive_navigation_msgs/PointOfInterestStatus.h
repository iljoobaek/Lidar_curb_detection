// Generated by gencpp from file automotive_navigation_msgs/PointOfInterestStatus.msg
// DO NOT EDIT!


#ifndef AUTOMOTIVE_NAVIGATION_MSGS_MESSAGE_POINTOFINTERESTSTATUS_H
#define AUTOMOTIVE_NAVIGATION_MSGS_MESSAGE_POINTOFINTERESTSTATUS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace automotive_navigation_msgs
{
template <class ContainerAllocator>
struct PointOfInterestStatus_
{
  typedef PointOfInterestStatus_<ContainerAllocator> Type;

  PointOfInterestStatus_()
    : guid(0)
    , distance(0.0)
    , heading(0.0)
    , x_position(0.0)
    , y_position(0.0)
    , params()  {
    }
  PointOfInterestStatus_(const ContainerAllocator& _alloc)
    : guid(0)
    , distance(0.0)
    , heading(0.0)
    , x_position(0.0)
    , y_position(0.0)
    , params(_alloc)  {
  (void)_alloc;
    }



   typedef uint64_t _guid_type;
  _guid_type guid;

   typedef float _distance_type;
  _distance_type distance;

   typedef float _heading_type;
  _heading_type heading;

   typedef float _x_position_type;
  _x_position_type x_position;

   typedef float _y_position_type;
  _y_position_type y_position;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _params_type;
  _params_type params;





  typedef boost::shared_ptr< ::automotive_navigation_msgs::PointOfInterestStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::automotive_navigation_msgs::PointOfInterestStatus_<ContainerAllocator> const> ConstPtr;

}; // struct PointOfInterestStatus_

typedef ::automotive_navigation_msgs::PointOfInterestStatus_<std::allocator<void> > PointOfInterestStatus;

typedef boost::shared_ptr< ::automotive_navigation_msgs::PointOfInterestStatus > PointOfInterestStatusPtr;
typedef boost::shared_ptr< ::automotive_navigation_msgs::PointOfInterestStatus const> PointOfInterestStatusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::automotive_navigation_msgs::PointOfInterestStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::automotive_navigation_msgs::PointOfInterestStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace automotive_navigation_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'automotive_navigation_msgs': ['/tmp/binarydeb/ros-kinetic-automotive-navigation-msgs-3.0.3/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::automotive_navigation_msgs::PointOfInterestStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::automotive_navigation_msgs::PointOfInterestStatus_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::automotive_navigation_msgs::PointOfInterestStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::automotive_navigation_msgs::PointOfInterestStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::automotive_navigation_msgs::PointOfInterestStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::automotive_navigation_msgs::PointOfInterestStatus_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::automotive_navigation_msgs::PointOfInterestStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3747ebda6c320e19738cf7561a6a689b";
  }

  static const char* value(const ::automotive_navigation_msgs::PointOfInterestStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3747ebda6c320e19ULL;
  static const uint64_t static_value2 = 0x738cf7561a6a689bULL;
};

template<class ContainerAllocator>
struct DataType< ::automotive_navigation_msgs::PointOfInterestStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "automotive_navigation_msgs/PointOfInterestStatus";
  }

  static const char* value(const ::automotive_navigation_msgs::PointOfInterestStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::automotive_navigation_msgs::PointOfInterestStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Point of Interest Status Message\n\
# Contains the distance, heading, a localized position of a point of interest\n\
\n\
uint64 guid        # Unique Id for this point\n\
\n\
float32 distance   # Great circle distance (meters)\n\
float32 heading    # Heading (radians)\n\
float32 x_position # Distance in front of the vehicle (meters)\n\
float32 y_position # Distance to the left of the vehicle (meters)\n\
\n\
string params      # List of parameter:value pairs\n\
\n\
";
  }

  static const char* value(const ::automotive_navigation_msgs::PointOfInterestStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::automotive_navigation_msgs::PointOfInterestStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.guid);
      stream.next(m.distance);
      stream.next(m.heading);
      stream.next(m.x_position);
      stream.next(m.y_position);
      stream.next(m.params);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PointOfInterestStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::automotive_navigation_msgs::PointOfInterestStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::automotive_navigation_msgs::PointOfInterestStatus_<ContainerAllocator>& v)
  {
    s << indent << "guid: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.guid);
    s << indent << "distance: ";
    Printer<float>::stream(s, indent + "  ", v.distance);
    s << indent << "heading: ";
    Printer<float>::stream(s, indent + "  ", v.heading);
    s << indent << "x_position: ";
    Printer<float>::stream(s, indent + "  ", v.x_position);
    s << indent << "y_position: ";
    Printer<float>::stream(s, indent + "  ", v.y_position);
    s << indent << "params: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.params);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AUTOMOTIVE_NAVIGATION_MSGS_MESSAGE_POINTOFINTERESTSTATUS_H
