// Generated by gencpp from file jsk_topic_tools/TopicInfo.msg
// DO NOT EDIT!


#ifndef JSK_TOPIC_TOOLS_MESSAGE_TOPICINFO_H
#define JSK_TOPIC_TOOLS_MESSAGE_TOPICINFO_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace jsk_topic_tools
{
template <class ContainerAllocator>
struct TopicInfo_
{
  typedef TopicInfo_<ContainerAllocator> Type;

  TopicInfo_()
    : topic_name()
    , rate(0.0)  {
    }
  TopicInfo_(const ContainerAllocator& _alloc)
    : topic_name(_alloc)
    , rate(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _topic_name_type;
  _topic_name_type topic_name;

   typedef double _rate_type;
  _rate_type rate;





  typedef boost::shared_ptr< ::jsk_topic_tools::TopicInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::jsk_topic_tools::TopicInfo_<ContainerAllocator> const> ConstPtr;

}; // struct TopicInfo_

typedef ::jsk_topic_tools::TopicInfo_<std::allocator<void> > TopicInfo;

typedef boost::shared_ptr< ::jsk_topic_tools::TopicInfo > TopicInfoPtr;
typedef boost::shared_ptr< ::jsk_topic_tools::TopicInfo const> TopicInfoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::jsk_topic_tools::TopicInfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::jsk_topic_tools::TopicInfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace jsk_topic_tools

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'jsk_topic_tools': ['/tmp/binarydeb/ros-kinetic-jsk-topic-tools-2.2.10/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::jsk_topic_tools::TopicInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::jsk_topic_tools::TopicInfo_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::jsk_topic_tools::TopicInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::jsk_topic_tools::TopicInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::jsk_topic_tools::TopicInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::jsk_topic_tools::TopicInfo_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::jsk_topic_tools::TopicInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "78edf14defd72c2fcd29e4fad0165ea9";
  }

  static const char* value(const ::jsk_topic_tools::TopicInfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x78edf14defd72c2fULL;
  static const uint64_t static_value2 = 0xcd29e4fad0165ea9ULL;
};

template<class ContainerAllocator>
struct DataType< ::jsk_topic_tools::TopicInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "jsk_topic_tools/TopicInfo";
  }

  static const char* value(const ::jsk_topic_tools::TopicInfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::jsk_topic_tools::TopicInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string topic_name\n\
float64 rate\n\
\n\
";
  }

  static const char* value(const ::jsk_topic_tools::TopicInfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::jsk_topic_tools::TopicInfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.topic_name);
      stream.next(m.rate);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TopicInfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::jsk_topic_tools::TopicInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::jsk_topic_tools::TopicInfo_<ContainerAllocator>& v)
  {
    s << indent << "topic_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.topic_name);
    s << indent << "rate: ";
    Printer<double>::stream(s, indent + "  ", v.rate);
  }
};

} // namespace message_operations
} // namespace ros

#endif // JSK_TOPIC_TOOLS_MESSAGE_TOPICINFO_H
