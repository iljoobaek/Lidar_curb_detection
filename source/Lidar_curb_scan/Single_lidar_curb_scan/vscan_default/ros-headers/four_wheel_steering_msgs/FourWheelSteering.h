// Generated by gencpp from file four_wheel_steering_msgs/FourWheelSteering.msg
// DO NOT EDIT!


#ifndef FOUR_WHEEL_STEERING_MSGS_MESSAGE_FOURWHEELSTEERING_H
#define FOUR_WHEEL_STEERING_MSGS_MESSAGE_FOURWHEELSTEERING_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace four_wheel_steering_msgs
{
template <class ContainerAllocator>
struct FourWheelSteering_
{
  typedef FourWheelSteering_<ContainerAllocator> Type;

  FourWheelSteering_()
    : front_steering_angle(0.0)
    , rear_steering_angle(0.0)
    , front_steering_angle_velocity(0.0)
    , rear_steering_angle_velocity(0.0)
    , speed(0.0)
    , acceleration(0.0)
    , jerk(0.0)  {
    }
  FourWheelSteering_(const ContainerAllocator& _alloc)
    : front_steering_angle(0.0)
    , rear_steering_angle(0.0)
    , front_steering_angle_velocity(0.0)
    , rear_steering_angle_velocity(0.0)
    , speed(0.0)
    , acceleration(0.0)
    , jerk(0.0)  {
  (void)_alloc;
    }



   typedef float _front_steering_angle_type;
  _front_steering_angle_type front_steering_angle;

   typedef float _rear_steering_angle_type;
  _rear_steering_angle_type rear_steering_angle;

   typedef float _front_steering_angle_velocity_type;
  _front_steering_angle_velocity_type front_steering_angle_velocity;

   typedef float _rear_steering_angle_velocity_type;
  _rear_steering_angle_velocity_type rear_steering_angle_velocity;

   typedef float _speed_type;
  _speed_type speed;

   typedef float _acceleration_type;
  _acceleration_type acceleration;

   typedef float _jerk_type;
  _jerk_type jerk;





  typedef boost::shared_ptr< ::four_wheel_steering_msgs::FourWheelSteering_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::four_wheel_steering_msgs::FourWheelSteering_<ContainerAllocator> const> ConstPtr;

}; // struct FourWheelSteering_

typedef ::four_wheel_steering_msgs::FourWheelSteering_<std::allocator<void> > FourWheelSteering;

typedef boost::shared_ptr< ::four_wheel_steering_msgs::FourWheelSteering > FourWheelSteeringPtr;
typedef boost::shared_ptr< ::four_wheel_steering_msgs::FourWheelSteering const> FourWheelSteeringConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::four_wheel_steering_msgs::FourWheelSteering_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::four_wheel_steering_msgs::FourWheelSteering_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace four_wheel_steering_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'four_wheel_steering_msgs': ['/tmp/binarydeb/ros-kinetic-four-wheel-steering-msgs-1.0.0/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::four_wheel_steering_msgs::FourWheelSteering_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::four_wheel_steering_msgs::FourWheelSteering_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::four_wheel_steering_msgs::FourWheelSteering_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::four_wheel_steering_msgs::FourWheelSteering_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::four_wheel_steering_msgs::FourWheelSteering_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::four_wheel_steering_msgs::FourWheelSteering_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::four_wheel_steering_msgs::FourWheelSteering_<ContainerAllocator> >
{
  static const char* value()
  {
    return "04dd0f55e1f168668af1e2587a7cdd2a";
  }

  static const char* value(const ::four_wheel_steering_msgs::FourWheelSteering_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x04dd0f55e1f16866ULL;
  static const uint64_t static_value2 = 0x8af1e2587a7cdd2aULL;
};

template<class ContainerAllocator>
struct DataType< ::four_wheel_steering_msgs::FourWheelSteering_<ContainerAllocator> >
{
  static const char* value()
  {
    return "four_wheel_steering_msgs/FourWheelSteering";
  }

  static const char* value(const ::four_wheel_steering_msgs::FourWheelSteering_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::four_wheel_steering_msgs::FourWheelSteering_<ContainerAllocator> >
{
  static const char* value()
  {
    return "## Driving command or odometry msg for a FourWheelSteering vehicle.\n\
#  $Id$\n\
\n\
# Assumes FourWheelSteering with front-wheel and rear-wheel steering. The left\n\
# and right front wheels are generally at different angles. To simplify,\n\
# the commanded angle corresponds to the yaw of a virtual wheel located at the\n\
# center of the front or rear axle, like on a tricycle.  Positive yaw is to\n\
# the left. (This is *not* the angle of the steering wheel inside the\n\
# passenger compartment.)\n\
#\n\
# Zero steering angle velocity means change the steering angle as\n\
# quickly as possible. Positive velocity indicates an absolute\n\
# rate of change either left or right.\n\
#\n\
float32 front_steering_angle           # position of the virtual angle (radians)\n\
float32 rear_steering_angle            # position of the virtual angle (radians)\n\
float32 front_steering_angle_velocity  # rate of change (radians/s)\n\
float32 rear_steering_angle_velocity   # rate of change (radians/s)\n\
\n\
# Speed, acceleration and jerk (the 1st, 2nd and 3rd\n\
# derivatives of position). All are measured at the vehicle's\n\
# center of the rear axle.\n\
#\n\
# Speed is the scalar magnitude of the velocity vector.\n\
# The speed value is the norm of the velocity component in x (longitudinal) \n\
# and y (lateral) direction\n\
# Direction is forward unless the sign is negative, indicating reverse.\n\
# If the steering angle are equal to +/- pi/2, then the direction is left\n\
# unless the sign is negative, indicating right.\n\
#\n\
# Zero acceleration means change speed as quickly as\n\
# possible. Positive acceleration indicates an absolute\n\
# magnitude; that includes deceleration.\n\
#\n\
# Zero jerk means change acceleration as quickly as possible. Positive\n\
# jerk indicates an absolute rate of acceleration change in\n\
# either direction (increasing or decreasing).\n\
#\n\
float32 speed                   # forward speed (m/s)\n\
float32 acceleration            # acceleration (m/s^2)\n\
float32 jerk                    # jerk (m/s^3)\n\
";
  }

  static const char* value(const ::four_wheel_steering_msgs::FourWheelSteering_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::four_wheel_steering_msgs::FourWheelSteering_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.front_steering_angle);
      stream.next(m.rear_steering_angle);
      stream.next(m.front_steering_angle_velocity);
      stream.next(m.rear_steering_angle_velocity);
      stream.next(m.speed);
      stream.next(m.acceleration);
      stream.next(m.jerk);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct FourWheelSteering_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::four_wheel_steering_msgs::FourWheelSteering_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::four_wheel_steering_msgs::FourWheelSteering_<ContainerAllocator>& v)
  {
    s << indent << "front_steering_angle: ";
    Printer<float>::stream(s, indent + "  ", v.front_steering_angle);
    s << indent << "rear_steering_angle: ";
    Printer<float>::stream(s, indent + "  ", v.rear_steering_angle);
    s << indent << "front_steering_angle_velocity: ";
    Printer<float>::stream(s, indent + "  ", v.front_steering_angle_velocity);
    s << indent << "rear_steering_angle_velocity: ";
    Printer<float>::stream(s, indent + "  ", v.rear_steering_angle_velocity);
    s << indent << "speed: ";
    Printer<float>::stream(s, indent + "  ", v.speed);
    s << indent << "acceleration: ";
    Printer<float>::stream(s, indent + "  ", v.acceleration);
    s << indent << "jerk: ";
    Printer<float>::stream(s, indent + "  ", v.jerk);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FOUR_WHEEL_STEERING_MSGS_MESSAGE_FOURWHEELSTEERING_H
