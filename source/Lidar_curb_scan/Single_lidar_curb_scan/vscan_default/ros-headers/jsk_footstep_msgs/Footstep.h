// Generated by gencpp from file jsk_footstep_msgs/Footstep.msg
// DO NOT EDIT!


#ifndef JSK_FOOTSTEP_MSGS_MESSAGE_FOOTSTEP_H
#define JSK_FOOTSTEP_MSGS_MESSAGE_FOOTSTEP_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Pose.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>

namespace jsk_footstep_msgs
{
template <class ContainerAllocator>
struct Footstep_
{
  typedef Footstep_<ContainerAllocator> Type;

  Footstep_()
    : leg(0)
    , pose()
    , duration()
    , footstep_group(0)
    , dimensions()
    , offset()
    , swing_height(0.0)
    , cost(0.0)  {
    }
  Footstep_(const ContainerAllocator& _alloc)
    : leg(0)
    , pose(_alloc)
    , duration()
    , footstep_group(0)
    , dimensions(_alloc)
    , offset(_alloc)
    , swing_height(0.0)
    , cost(0.0)  {
  (void)_alloc;
    }



   typedef uint8_t _leg_type;
  _leg_type leg;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _pose_type;
  _pose_type pose;

   typedef ros::Duration _duration_type;
  _duration_type duration;

   typedef uint32_t _footstep_group_type;
  _footstep_group_type footstep_group;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _dimensions_type;
  _dimensions_type dimensions;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _offset_type;
  _offset_type offset;

   typedef float _swing_height_type;
  _swing_height_type swing_height;

   typedef float _cost_type;
  _cost_type cost;



  enum {
    RIGHT = 2u,
    LEFT = 1u,
    REJECTED = 3u,
    APPROVED = 4u,
    LLEG = 1u,
    RLEG = 2u,
    LARM = 5u,
    RARM = 6u,
  };


  typedef boost::shared_ptr< ::jsk_footstep_msgs::Footstep_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::jsk_footstep_msgs::Footstep_<ContainerAllocator> const> ConstPtr;

}; // struct Footstep_

typedef ::jsk_footstep_msgs::Footstep_<std::allocator<void> > Footstep;

typedef boost::shared_ptr< ::jsk_footstep_msgs::Footstep > FootstepPtr;
typedef boost::shared_ptr< ::jsk_footstep_msgs::Footstep const> FootstepConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::jsk_footstep_msgs::Footstep_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::jsk_footstep_msgs::Footstep_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace jsk_footstep_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'jsk_footstep_msgs': ['/tmp/binarydeb/ros-kinetic-jsk-footstep-msgs-4.3.1/msg', '/tmp/binarydeb/ros-kinetic-jsk-footstep-msgs-4.3.1/obj-x86_64-linux-gnu/devel/share/jsk_footstep_msgs/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::jsk_footstep_msgs::Footstep_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::jsk_footstep_msgs::Footstep_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::jsk_footstep_msgs::Footstep_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::jsk_footstep_msgs::Footstep_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::jsk_footstep_msgs::Footstep_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::jsk_footstep_msgs::Footstep_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::jsk_footstep_msgs::Footstep_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d890b275b63a90fe5f22a21e9a879971";
  }

  static const char* value(const ::jsk_footstep_msgs::Footstep_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd890b275b63a90feULL;
  static const uint64_t static_value2 = 0x5f22a21e9a879971ULL;
};

template<class ContainerAllocator>
struct DataType< ::jsk_footstep_msgs::Footstep_<ContainerAllocator> >
{
  static const char* value()
  {
    return "jsk_footstep_msgs/Footstep";
  }

  static const char* value(const ::jsk_footstep_msgs::Footstep_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::jsk_footstep_msgs::Footstep_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 RIGHT=2\n\
uint8 LEFT=1\n\
\n\
# Constants to visualize progress\n\
uint8 REJECTED=3\n\
uint8 APPROVED=4\n\
\n\
## limb_indicator values\n\
uint8 LLEG=1\n\
uint8 RLEG=2\n\
uint8 LARM=5\n\
uint8 RARM=6\n\
\n\
uint8 leg ## value should be one of limb_indicator values.\n\
geometry_msgs/Pose pose ## 'pose' represents nominal pose. It may be an end-effector of limb.\n\
duration duration\n\
# optional parameters\n\
uint32 footstep_group\n\
geometry_msgs/Vector3 dimensions ## cube [length(x), width(y), height(z)]\n\
geometry_msgs/Vector3 offset     ## offset from pose to center of cube\n\
float32 swing_height\n\
float32 cost\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of position and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
# It is only meant to represent a direction. Therefore, it does not\n\
# make sense to apply a translation to it (e.g., when applying a \n\
# generic rigid transformation to a Vector3, tf2 will only apply the\n\
# rotation). If you want your data to be translatable too, use the\n\
# geometry_msgs/Point message instead.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const ::jsk_footstep_msgs::Footstep_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::jsk_footstep_msgs::Footstep_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.leg);
      stream.next(m.pose);
      stream.next(m.duration);
      stream.next(m.footstep_group);
      stream.next(m.dimensions);
      stream.next(m.offset);
      stream.next(m.swing_height);
      stream.next(m.cost);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Footstep_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::jsk_footstep_msgs::Footstep_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::jsk_footstep_msgs::Footstep_<ContainerAllocator>& v)
  {
    s << indent << "leg: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.leg);
    s << indent << "pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.pose);
    s << indent << "duration: ";
    Printer<ros::Duration>::stream(s, indent + "  ", v.duration);
    s << indent << "footstep_group: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.footstep_group);
    s << indent << "dimensions: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.dimensions);
    s << indent << "offset: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.offset);
    s << indent << "swing_height: ";
    Printer<float>::stream(s, indent + "  ", v.swing_height);
    s << indent << "cost: ";
    Printer<float>::stream(s, indent + "  ", v.cost);
  }
};

} // namespace message_operations
} // namespace ros

#endif // JSK_FOOTSTEP_MSGS_MESSAGE_FOOTSTEP_H
