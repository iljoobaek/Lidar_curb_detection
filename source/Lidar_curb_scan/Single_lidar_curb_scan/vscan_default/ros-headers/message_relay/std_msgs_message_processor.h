// Generated by message_relay for processing frame IDs in std_msgs messages and services.
// DO NOT EDIT


#ifndef MESSAGE_RELAY_STD_MSGS_MESSAGE_PROCESSOR_H
#define MESSAGE_RELAY_STD_MSGS_MESSAGE_PROCESSOR_H

#include "message_relay/processor/message_processor.h"

#include "std_msgs/Bool.h"
#include "std_msgs/Byte.h"
#include "std_msgs/ByteMultiArray.h"
#include "std_msgs/Char.h"
#include "std_msgs/ColorRGBA.h"
#include "std_msgs/Duration.h"
#include "std_msgs/Empty.h"
#include "std_msgs/Float32.h"
#include "std_msgs/Float32MultiArray.h"
#include "std_msgs/Float64.h"
#include "std_msgs/Float64MultiArray.h"
#include "std_msgs/Header.h"
#include "std_msgs/Int16.h"
#include "std_msgs/Int16MultiArray.h"
#include "std_msgs/Int32.h"
#include "std_msgs/Int32MultiArray.h"
#include "std_msgs/Int64.h"
#include "std_msgs/Int64MultiArray.h"
#include "std_msgs/Int8.h"
#include "std_msgs/Int8MultiArray.h"
#include "std_msgs/MultiArrayDimension.h"
#include "std_msgs/MultiArrayLayout.h"
#include "std_msgs/String.h"
#include "std_msgs/Time.h"
#include "std_msgs/UInt16.h"
#include "std_msgs/UInt16MultiArray.h"
#include "std_msgs/UInt32.h"
#include "std_msgs/UInt32MultiArray.h"
#include "std_msgs/UInt64.h"
#include "std_msgs/UInt64MultiArray.h"
#include "std_msgs/UInt8.h"
#include "std_msgs/UInt8MultiArray.h"


namespace message_relay
{

template<>
void MessageProcessor<std_msgs::Bool, FrameIdProcessor>::processMessage(std_msgs::Bool::Ptr &msg, FrameIdProcessor::ConstPtr &frame_id_processor);

template<>
void MessageProcessor<std_msgs::Int8MultiArray, FrameIdProcessor>::processMessage(std_msgs::Int8MultiArray::Ptr &msg, FrameIdProcessor::ConstPtr &frame_id_processor);

template<>
void MessageProcessor<std_msgs::UInt64MultiArray, FrameIdProcessor>::processMessage(std_msgs::UInt64MultiArray::Ptr &msg, FrameIdProcessor::ConstPtr &frame_id_processor);

template<>
void MessageProcessor<std_msgs::Float32, FrameIdProcessor>::processMessage(std_msgs::Float32::Ptr &msg, FrameIdProcessor::ConstPtr &frame_id_processor);

template<>
void MessageProcessor<std_msgs::Int32, FrameIdProcessor>::processMessage(std_msgs::Int32::Ptr &msg, FrameIdProcessor::ConstPtr &frame_id_processor);

template<>
void MessageProcessor<std_msgs::Int16, FrameIdProcessor>::processMessage(std_msgs::Int16::Ptr &msg, FrameIdProcessor::ConstPtr &frame_id_processor);

template<>
void MessageProcessor<std_msgs::String, FrameIdProcessor>::processMessage(std_msgs::String::Ptr &msg, FrameIdProcessor::ConstPtr &frame_id_processor);

template<>
void MessageProcessor<std_msgs::UInt16MultiArray, FrameIdProcessor>::processMessage(std_msgs::UInt16MultiArray::Ptr &msg, FrameIdProcessor::ConstPtr &frame_id_processor);

template<>
void MessageProcessor<std_msgs::Int16MultiArray, FrameIdProcessor>::processMessage(std_msgs::Int16MultiArray::Ptr &msg, FrameIdProcessor::ConstPtr &frame_id_processor);

template<>
void MessageProcessor<std_msgs::ByteMultiArray, FrameIdProcessor>::processMessage(std_msgs::ByteMultiArray::Ptr &msg, FrameIdProcessor::ConstPtr &frame_id_processor);

template<>
void MessageProcessor<std_msgs::MultiArrayLayout, FrameIdProcessor>::processMessage(std_msgs::MultiArrayLayout::Ptr &msg, FrameIdProcessor::ConstPtr &frame_id_processor);

template<>
void MessageProcessor<std_msgs::UInt16, FrameIdProcessor>::processMessage(std_msgs::UInt16::Ptr &msg, FrameIdProcessor::ConstPtr &frame_id_processor);

template<>
void MessageProcessor<std_msgs::Empty, FrameIdProcessor>::processMessage(std_msgs::Empty::Ptr &msg, FrameIdProcessor::ConstPtr &frame_id_processor);

template<>
void MessageProcessor<std_msgs::ColorRGBA, FrameIdProcessor>::processMessage(std_msgs::ColorRGBA::Ptr &msg, FrameIdProcessor::ConstPtr &frame_id_processor);

template<>
void MessageProcessor<std_msgs::Byte, FrameIdProcessor>::processMessage(std_msgs::Byte::Ptr &msg, FrameIdProcessor::ConstPtr &frame_id_processor);

template<>
void MessageProcessor<std_msgs::Int8, FrameIdProcessor>::processMessage(std_msgs::Int8::Ptr &msg, FrameIdProcessor::ConstPtr &frame_id_processor);

template<>
void MessageProcessor<std_msgs::UInt32MultiArray, FrameIdProcessor>::processMessage(std_msgs::UInt32MultiArray::Ptr &msg, FrameIdProcessor::ConstPtr &frame_id_processor);

template<>
void MessageProcessor<std_msgs::UInt8MultiArray, FrameIdProcessor>::processMessage(std_msgs::UInt8MultiArray::Ptr &msg, FrameIdProcessor::ConstPtr &frame_id_processor);

template<>
void MessageProcessor<std_msgs::Float64, FrameIdProcessor>::processMessage(std_msgs::Float64::Ptr &msg, FrameIdProcessor::ConstPtr &frame_id_processor);

template<>
void MessageProcessor<std_msgs::Int32MultiArray, FrameIdProcessor>::processMessage(std_msgs::Int32MultiArray::Ptr &msg, FrameIdProcessor::ConstPtr &frame_id_processor);

template<>
void MessageProcessor<std_msgs::UInt8, FrameIdProcessor>::processMessage(std_msgs::UInt8::Ptr &msg, FrameIdProcessor::ConstPtr &frame_id_processor);

template<>
void MessageProcessor<std_msgs::MultiArrayDimension, FrameIdProcessor>::processMessage(std_msgs::MultiArrayDimension::Ptr &msg, FrameIdProcessor::ConstPtr &frame_id_processor);

template<>
void MessageProcessor<std_msgs::Float64MultiArray, FrameIdProcessor>::processMessage(std_msgs::Float64MultiArray::Ptr &msg, FrameIdProcessor::ConstPtr &frame_id_processor);

template<>
void MessageProcessor<std_msgs::Int64, FrameIdProcessor>::processMessage(std_msgs::Int64::Ptr &msg, FrameIdProcessor::ConstPtr &frame_id_processor);

template<>
void MessageProcessor<std_msgs::Time, FrameIdProcessor>::processMessage(std_msgs::Time::Ptr &msg, FrameIdProcessor::ConstPtr &frame_id_processor);

template<>
void MessageProcessor<std_msgs::Int64MultiArray, FrameIdProcessor>::processMessage(std_msgs::Int64MultiArray::Ptr &msg, FrameIdProcessor::ConstPtr &frame_id_processor);

template<>
void MessageProcessor<std_msgs::UInt64, FrameIdProcessor>::processMessage(std_msgs::UInt64::Ptr &msg, FrameIdProcessor::ConstPtr &frame_id_processor);

template<>
void MessageProcessor<std_msgs::Float32MultiArray, FrameIdProcessor>::processMessage(std_msgs::Float32MultiArray::Ptr &msg, FrameIdProcessor::ConstPtr &frame_id_processor);

template<>
void MessageProcessor<std_msgs::UInt32, FrameIdProcessor>::processMessage(std_msgs::UInt32::Ptr &msg, FrameIdProcessor::ConstPtr &frame_id_processor);

template<>
void MessageProcessor<std_msgs::Char, FrameIdProcessor>::processMessage(std_msgs::Char::Ptr &msg, FrameIdProcessor::ConstPtr &frame_id_processor);

template<>
void MessageProcessor<std_msgs::Header, FrameIdProcessor>::processMessage(std_msgs::Header::Ptr &msg, FrameIdProcessor::ConstPtr &frame_id_processor);

template<>
void MessageProcessor<std_msgs::Duration, FrameIdProcessor>::processMessage(std_msgs::Duration::Ptr &msg, FrameIdProcessor::ConstPtr &frame_id_processor);

template<>
void MessageProcessor<std_msgs::Bool, TimeProcessor>::processMessage(std_msgs::Bool::Ptr &msg, TimeProcessor::ConstPtr &time_processor);

template<>
void MessageProcessor<std_msgs::Int8MultiArray, TimeProcessor>::processMessage(std_msgs::Int8MultiArray::Ptr &msg, TimeProcessor::ConstPtr &time_processor);

template<>
void MessageProcessor<std_msgs::UInt64MultiArray, TimeProcessor>::processMessage(std_msgs::UInt64MultiArray::Ptr &msg, TimeProcessor::ConstPtr &time_processor);

template<>
void MessageProcessor<std_msgs::Float32, TimeProcessor>::processMessage(std_msgs::Float32::Ptr &msg, TimeProcessor::ConstPtr &time_processor);

template<>
void MessageProcessor<std_msgs::Int32, TimeProcessor>::processMessage(std_msgs::Int32::Ptr &msg, TimeProcessor::ConstPtr &time_processor);

template<>
void MessageProcessor<std_msgs::Int16, TimeProcessor>::processMessage(std_msgs::Int16::Ptr &msg, TimeProcessor::ConstPtr &time_processor);

template<>
void MessageProcessor<std_msgs::String, TimeProcessor>::processMessage(std_msgs::String::Ptr &msg, TimeProcessor::ConstPtr &time_processor);

template<>
void MessageProcessor<std_msgs::UInt16MultiArray, TimeProcessor>::processMessage(std_msgs::UInt16MultiArray::Ptr &msg, TimeProcessor::ConstPtr &time_processor);

template<>
void MessageProcessor<std_msgs::Int16MultiArray, TimeProcessor>::processMessage(std_msgs::Int16MultiArray::Ptr &msg, TimeProcessor::ConstPtr &time_processor);

template<>
void MessageProcessor<std_msgs::ByteMultiArray, TimeProcessor>::processMessage(std_msgs::ByteMultiArray::Ptr &msg, TimeProcessor::ConstPtr &time_processor);

template<>
void MessageProcessor<std_msgs::MultiArrayLayout, TimeProcessor>::processMessage(std_msgs::MultiArrayLayout::Ptr &msg, TimeProcessor::ConstPtr &time_processor);

template<>
void MessageProcessor<std_msgs::UInt16, TimeProcessor>::processMessage(std_msgs::UInt16::Ptr &msg, TimeProcessor::ConstPtr &time_processor);

template<>
void MessageProcessor<std_msgs::Empty, TimeProcessor>::processMessage(std_msgs::Empty::Ptr &msg, TimeProcessor::ConstPtr &time_processor);

template<>
void MessageProcessor<std_msgs::ColorRGBA, TimeProcessor>::processMessage(std_msgs::ColorRGBA::Ptr &msg, TimeProcessor::ConstPtr &time_processor);

template<>
void MessageProcessor<std_msgs::Byte, TimeProcessor>::processMessage(std_msgs::Byte::Ptr &msg, TimeProcessor::ConstPtr &time_processor);

template<>
void MessageProcessor<std_msgs::Int8, TimeProcessor>::processMessage(std_msgs::Int8::Ptr &msg, TimeProcessor::ConstPtr &time_processor);

template<>
void MessageProcessor<std_msgs::UInt32MultiArray, TimeProcessor>::processMessage(std_msgs::UInt32MultiArray::Ptr &msg, TimeProcessor::ConstPtr &time_processor);

template<>
void MessageProcessor<std_msgs::UInt8MultiArray, TimeProcessor>::processMessage(std_msgs::UInt8MultiArray::Ptr &msg, TimeProcessor::ConstPtr &time_processor);

template<>
void MessageProcessor<std_msgs::Float64, TimeProcessor>::processMessage(std_msgs::Float64::Ptr &msg, TimeProcessor::ConstPtr &time_processor);

template<>
void MessageProcessor<std_msgs::Int32MultiArray, TimeProcessor>::processMessage(std_msgs::Int32MultiArray::Ptr &msg, TimeProcessor::ConstPtr &time_processor);

template<>
void MessageProcessor<std_msgs::UInt8, TimeProcessor>::processMessage(std_msgs::UInt8::Ptr &msg, TimeProcessor::ConstPtr &time_processor);

template<>
void MessageProcessor<std_msgs::MultiArrayDimension, TimeProcessor>::processMessage(std_msgs::MultiArrayDimension::Ptr &msg, TimeProcessor::ConstPtr &time_processor);

template<>
void MessageProcessor<std_msgs::Float64MultiArray, TimeProcessor>::processMessage(std_msgs::Float64MultiArray::Ptr &msg, TimeProcessor::ConstPtr &time_processor);

template<>
void MessageProcessor<std_msgs::Int64, TimeProcessor>::processMessage(std_msgs::Int64::Ptr &msg, TimeProcessor::ConstPtr &time_processor);

template<>
void MessageProcessor<std_msgs::Time, TimeProcessor>::processMessage(std_msgs::Time::Ptr &msg, TimeProcessor::ConstPtr &time_processor);

template<>
void MessageProcessor<std_msgs::Int64MultiArray, TimeProcessor>::processMessage(std_msgs::Int64MultiArray::Ptr &msg, TimeProcessor::ConstPtr &time_processor);

template<>
void MessageProcessor<std_msgs::UInt64, TimeProcessor>::processMessage(std_msgs::UInt64::Ptr &msg, TimeProcessor::ConstPtr &time_processor);

template<>
void MessageProcessor<std_msgs::Float32MultiArray, TimeProcessor>::processMessage(std_msgs::Float32MultiArray::Ptr &msg, TimeProcessor::ConstPtr &time_processor);

template<>
void MessageProcessor<std_msgs::UInt32, TimeProcessor>::processMessage(std_msgs::UInt32::Ptr &msg, TimeProcessor::ConstPtr &time_processor);

template<>
void MessageProcessor<std_msgs::Char, TimeProcessor>::processMessage(std_msgs::Char::Ptr &msg, TimeProcessor::ConstPtr &time_processor);

template<>
void MessageProcessor<std_msgs::Header, TimeProcessor>::processMessage(std_msgs::Header::Ptr &msg, TimeProcessor::ConstPtr &time_processor);

template<>
void MessageProcessor<std_msgs::Duration, TimeProcessor>::processMessage(std_msgs::Duration::Ptr &msg, TimeProcessor::ConstPtr &time_processor);

}  // namespace message_relay

#endif // MESSAGE_RELAY_STD_MSGS_MESSAGE_PROCESSOR_H
