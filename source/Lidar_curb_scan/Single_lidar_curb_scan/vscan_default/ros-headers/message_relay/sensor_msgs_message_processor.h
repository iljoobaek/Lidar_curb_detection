// Generated by message_relay for processing frame IDs in sensor_msgs messages and services.
// DO NOT EDIT


#ifndef MESSAGE_RELAY_SENSOR_MSGS_MESSAGE_PROCESSOR_H
#define MESSAGE_RELAY_SENSOR_MSGS_MESSAGE_PROCESSOR_H

#include "message_relay/processor/message_processor.h"

#include "sensor_msgs/BatteryState.h"
#include "sensor_msgs/CameraInfo.h"
#include "sensor_msgs/ChannelFloat32.h"
#include "sensor_msgs/CompressedImage.h"
#include "sensor_msgs/FluidPressure.h"
#include "sensor_msgs/Illuminance.h"
#include "sensor_msgs/Image.h"
#include "sensor_msgs/Imu.h"
#include "sensor_msgs/JointState.h"
#include "sensor_msgs/Joy.h"
#include "sensor_msgs/JoyFeedback.h"
#include "sensor_msgs/JoyFeedbackArray.h"
#include "sensor_msgs/LaserEcho.h"
#include "sensor_msgs/LaserScan.h"
#include "sensor_msgs/MagneticField.h"
#include "sensor_msgs/MultiDOFJointState.h"
#include "sensor_msgs/MultiEchoLaserScan.h"
#include "sensor_msgs/NavSatFix.h"
#include "sensor_msgs/NavSatStatus.h"
#include "sensor_msgs/PointCloud.h"
#include "sensor_msgs/PointCloud2.h"
#include "sensor_msgs/PointField.h"
#include "sensor_msgs/Range.h"
#include "sensor_msgs/RegionOfInterest.h"
#include "sensor_msgs/RelativeHumidity.h"
#include "sensor_msgs/Temperature.h"
#include "sensor_msgs/TimeReference.h"

#include "sensor_msgs/SetCameraInfo.h"

namespace message_relay
{

template<>
void MessageProcessor<sensor_msgs::Temperature, FrameIdProcessor>::processMessage(sensor_msgs::Temperature::Ptr &msg, FrameIdProcessor::ConstPtr &frame_id_processor);

template<>
void MessageProcessor<sensor_msgs::LaserEcho, FrameIdProcessor>::processMessage(sensor_msgs::LaserEcho::Ptr &msg, FrameIdProcessor::ConstPtr &frame_id_processor);

template<>
void MessageProcessor<sensor_msgs::Illuminance, FrameIdProcessor>::processMessage(sensor_msgs::Illuminance::Ptr &msg, FrameIdProcessor::ConstPtr &frame_id_processor);

template<>
void MessageProcessor<sensor_msgs::RegionOfInterest, FrameIdProcessor>::processMessage(sensor_msgs::RegionOfInterest::Ptr &msg, FrameIdProcessor::ConstPtr &frame_id_processor);

template<>
void MessageProcessor<sensor_msgs::JoyFeedbackArray, FrameIdProcessor>::processMessage(sensor_msgs::JoyFeedbackArray::Ptr &msg, FrameIdProcessor::ConstPtr &frame_id_processor);

template<>
void MessageProcessor<sensor_msgs::Imu, FrameIdProcessor>::processMessage(sensor_msgs::Imu::Ptr &msg, FrameIdProcessor::ConstPtr &frame_id_processor);

template<>
void MessageProcessor<sensor_msgs::NavSatStatus, FrameIdProcessor>::processMessage(sensor_msgs::NavSatStatus::Ptr &msg, FrameIdProcessor::ConstPtr &frame_id_processor);

template<>
void MessageProcessor<sensor_msgs::MultiDOFJointState, FrameIdProcessor>::processMessage(sensor_msgs::MultiDOFJointState::Ptr &msg, FrameIdProcessor::ConstPtr &frame_id_processor);

template<>
void MessageProcessor<sensor_msgs::Joy, FrameIdProcessor>::processMessage(sensor_msgs::Joy::Ptr &msg, FrameIdProcessor::ConstPtr &frame_id_processor);

template<>
void MessageProcessor<sensor_msgs::MagneticField, FrameIdProcessor>::processMessage(sensor_msgs::MagneticField::Ptr &msg, FrameIdProcessor::ConstPtr &frame_id_processor);

template<>
void MessageProcessor<sensor_msgs::PointField, FrameIdProcessor>::processMessage(sensor_msgs::PointField::Ptr &msg, FrameIdProcessor::ConstPtr &frame_id_processor);

template<>
void MessageProcessor<sensor_msgs::LaserScan, FrameIdProcessor>::processMessage(sensor_msgs::LaserScan::Ptr &msg, FrameIdProcessor::ConstPtr &frame_id_processor);

template<>
void MessageProcessor<sensor_msgs::BatteryState, FrameIdProcessor>::processMessage(sensor_msgs::BatteryState::Ptr &msg, FrameIdProcessor::ConstPtr &frame_id_processor);

template<>
void MessageProcessor<sensor_msgs::CompressedImage, FrameIdProcessor>::processMessage(sensor_msgs::CompressedImage::Ptr &msg, FrameIdProcessor::ConstPtr &frame_id_processor);

template<>
void MessageProcessor<sensor_msgs::PointCloud, FrameIdProcessor>::processMessage(sensor_msgs::PointCloud::Ptr &msg, FrameIdProcessor::ConstPtr &frame_id_processor);

template<>
void MessageProcessor<sensor_msgs::RelativeHumidity, FrameIdProcessor>::processMessage(sensor_msgs::RelativeHumidity::Ptr &msg, FrameIdProcessor::ConstPtr &frame_id_processor);

template<>
void MessageProcessor<sensor_msgs::FluidPressure, FrameIdProcessor>::processMessage(sensor_msgs::FluidPressure::Ptr &msg, FrameIdProcessor::ConstPtr &frame_id_processor);

template<>
void MessageProcessor<sensor_msgs::JoyFeedback, FrameIdProcessor>::processMessage(sensor_msgs::JoyFeedback::Ptr &msg, FrameIdProcessor::ConstPtr &frame_id_processor);

template<>
void MessageProcessor<sensor_msgs::Range, FrameIdProcessor>::processMessage(sensor_msgs::Range::Ptr &msg, FrameIdProcessor::ConstPtr &frame_id_processor);

template<>
void MessageProcessor<sensor_msgs::ChannelFloat32, FrameIdProcessor>::processMessage(sensor_msgs::ChannelFloat32::Ptr &msg, FrameIdProcessor::ConstPtr &frame_id_processor);

template<>
void MessageProcessor<sensor_msgs::CameraInfo, FrameIdProcessor>::processMessage(sensor_msgs::CameraInfo::Ptr &msg, FrameIdProcessor::ConstPtr &frame_id_processor);

template<>
void MessageProcessor<sensor_msgs::Image, FrameIdProcessor>::processMessage(sensor_msgs::Image::Ptr &msg, FrameIdProcessor::ConstPtr &frame_id_processor);

template<>
void MessageProcessor<sensor_msgs::MultiEchoLaserScan, FrameIdProcessor>::processMessage(sensor_msgs::MultiEchoLaserScan::Ptr &msg, FrameIdProcessor::ConstPtr &frame_id_processor);

template<>
void MessageProcessor<sensor_msgs::JointState, FrameIdProcessor>::processMessage(sensor_msgs::JointState::Ptr &msg, FrameIdProcessor::ConstPtr &frame_id_processor);

template<>
void MessageProcessor<sensor_msgs::TimeReference, FrameIdProcessor>::processMessage(sensor_msgs::TimeReference::Ptr &msg, FrameIdProcessor::ConstPtr &frame_id_processor);

template<>
void MessageProcessor<sensor_msgs::PointCloud2, FrameIdProcessor>::processMessage(sensor_msgs::PointCloud2::Ptr &msg, FrameIdProcessor::ConstPtr &frame_id_processor);

template<>
void MessageProcessor<sensor_msgs::NavSatFix, FrameIdProcessor>::processMessage(sensor_msgs::NavSatFix::Ptr &msg, FrameIdProcessor::ConstPtr &frame_id_processor);

template<>
void ServiceProcessor<sensor_msgs::SetCameraInfo, FrameIdProcessor>::processRequest(sensor_msgs::SetCameraInfo::Request &req, FrameIdProcessor::ConstPtr &frame_id_processor);

template<>
void ServiceProcessor<sensor_msgs::SetCameraInfo, FrameIdProcessor>::processResponse(sensor_msgs::SetCameraInfo::Response &res, FrameIdProcessor::ConstPtr &frame_id_processor);

template<>
void MessageProcessor<sensor_msgs::Temperature, TimeProcessor>::processMessage(sensor_msgs::Temperature::Ptr &msg, TimeProcessor::ConstPtr &time_processor);

template<>
void MessageProcessor<sensor_msgs::LaserEcho, TimeProcessor>::processMessage(sensor_msgs::LaserEcho::Ptr &msg, TimeProcessor::ConstPtr &time_processor);

template<>
void MessageProcessor<sensor_msgs::Illuminance, TimeProcessor>::processMessage(sensor_msgs::Illuminance::Ptr &msg, TimeProcessor::ConstPtr &time_processor);

template<>
void MessageProcessor<sensor_msgs::RegionOfInterest, TimeProcessor>::processMessage(sensor_msgs::RegionOfInterest::Ptr &msg, TimeProcessor::ConstPtr &time_processor);

template<>
void MessageProcessor<sensor_msgs::JoyFeedbackArray, TimeProcessor>::processMessage(sensor_msgs::JoyFeedbackArray::Ptr &msg, TimeProcessor::ConstPtr &time_processor);

template<>
void MessageProcessor<sensor_msgs::Imu, TimeProcessor>::processMessage(sensor_msgs::Imu::Ptr &msg, TimeProcessor::ConstPtr &time_processor);

template<>
void MessageProcessor<sensor_msgs::NavSatStatus, TimeProcessor>::processMessage(sensor_msgs::NavSatStatus::Ptr &msg, TimeProcessor::ConstPtr &time_processor);

template<>
void MessageProcessor<sensor_msgs::MultiDOFJointState, TimeProcessor>::processMessage(sensor_msgs::MultiDOFJointState::Ptr &msg, TimeProcessor::ConstPtr &time_processor);

template<>
void MessageProcessor<sensor_msgs::Joy, TimeProcessor>::processMessage(sensor_msgs::Joy::Ptr &msg, TimeProcessor::ConstPtr &time_processor);

template<>
void MessageProcessor<sensor_msgs::MagneticField, TimeProcessor>::processMessage(sensor_msgs::MagneticField::Ptr &msg, TimeProcessor::ConstPtr &time_processor);

template<>
void MessageProcessor<sensor_msgs::PointField, TimeProcessor>::processMessage(sensor_msgs::PointField::Ptr &msg, TimeProcessor::ConstPtr &time_processor);

template<>
void MessageProcessor<sensor_msgs::LaserScan, TimeProcessor>::processMessage(sensor_msgs::LaserScan::Ptr &msg, TimeProcessor::ConstPtr &time_processor);

template<>
void MessageProcessor<sensor_msgs::BatteryState, TimeProcessor>::processMessage(sensor_msgs::BatteryState::Ptr &msg, TimeProcessor::ConstPtr &time_processor);

template<>
void MessageProcessor<sensor_msgs::CompressedImage, TimeProcessor>::processMessage(sensor_msgs::CompressedImage::Ptr &msg, TimeProcessor::ConstPtr &time_processor);

template<>
void MessageProcessor<sensor_msgs::PointCloud, TimeProcessor>::processMessage(sensor_msgs::PointCloud::Ptr &msg, TimeProcessor::ConstPtr &time_processor);

template<>
void MessageProcessor<sensor_msgs::RelativeHumidity, TimeProcessor>::processMessage(sensor_msgs::RelativeHumidity::Ptr &msg, TimeProcessor::ConstPtr &time_processor);

template<>
void MessageProcessor<sensor_msgs::FluidPressure, TimeProcessor>::processMessage(sensor_msgs::FluidPressure::Ptr &msg, TimeProcessor::ConstPtr &time_processor);

template<>
void MessageProcessor<sensor_msgs::JoyFeedback, TimeProcessor>::processMessage(sensor_msgs::JoyFeedback::Ptr &msg, TimeProcessor::ConstPtr &time_processor);

template<>
void MessageProcessor<sensor_msgs::Range, TimeProcessor>::processMessage(sensor_msgs::Range::Ptr &msg, TimeProcessor::ConstPtr &time_processor);

template<>
void MessageProcessor<sensor_msgs::ChannelFloat32, TimeProcessor>::processMessage(sensor_msgs::ChannelFloat32::Ptr &msg, TimeProcessor::ConstPtr &time_processor);

template<>
void MessageProcessor<sensor_msgs::CameraInfo, TimeProcessor>::processMessage(sensor_msgs::CameraInfo::Ptr &msg, TimeProcessor::ConstPtr &time_processor);

template<>
void MessageProcessor<sensor_msgs::Image, TimeProcessor>::processMessage(sensor_msgs::Image::Ptr &msg, TimeProcessor::ConstPtr &time_processor);

template<>
void MessageProcessor<sensor_msgs::MultiEchoLaserScan, TimeProcessor>::processMessage(sensor_msgs::MultiEchoLaserScan::Ptr &msg, TimeProcessor::ConstPtr &time_processor);

template<>
void MessageProcessor<sensor_msgs::JointState, TimeProcessor>::processMessage(sensor_msgs::JointState::Ptr &msg, TimeProcessor::ConstPtr &time_processor);

template<>
void MessageProcessor<sensor_msgs::TimeReference, TimeProcessor>::processMessage(sensor_msgs::TimeReference::Ptr &msg, TimeProcessor::ConstPtr &time_processor);

template<>
void MessageProcessor<sensor_msgs::PointCloud2, TimeProcessor>::processMessage(sensor_msgs::PointCloud2::Ptr &msg, TimeProcessor::ConstPtr &time_processor);

template<>
void MessageProcessor<sensor_msgs::NavSatFix, TimeProcessor>::processMessage(sensor_msgs::NavSatFix::Ptr &msg, TimeProcessor::ConstPtr &time_processor);

template<>
void ServiceProcessor<sensor_msgs::SetCameraInfo, TimeProcessor>::processRequest(sensor_msgs::SetCameraInfo::Request &req, TimeProcessor::ConstPtr &time_processor);

template<>
void ServiceProcessor<sensor_msgs::SetCameraInfo, TimeProcessor>::processResponse(sensor_msgs::SetCameraInfo::Response &res, TimeProcessor::ConstPtr &time_processor);

}  // namespace message_relay

#endif // MESSAGE_RELAY_SENSOR_MSGS_MESSAGE_PROCESSOR_H
