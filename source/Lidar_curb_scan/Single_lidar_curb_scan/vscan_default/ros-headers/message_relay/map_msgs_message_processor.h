// Generated by message_relay for processing frame IDs in map_msgs messages and services.
// DO NOT EDIT


#ifndef MESSAGE_RELAY_MAP_MSGS_MESSAGE_PROCESSOR_H
#define MESSAGE_RELAY_MAP_MSGS_MESSAGE_PROCESSOR_H

#include "message_relay/processor/message_processor.h"

#include "map_msgs/OccupancyGridUpdate.h"
#include "map_msgs/PointCloud2Update.h"
#include "map_msgs/ProjectedMapInfo.h"
#include "map_msgs/ProjectedMap.h"

#include "map_msgs/GetMapROI.h"
#include "map_msgs/GetPointMapROI.h"
#include "map_msgs/GetPointMap.h"
#include "map_msgs/ProjectedMapsInfo.h"
#include "map_msgs/SaveMap.h"
#include "map_msgs/SetMapProjections.h"

namespace message_relay
{

template<>
void MessageProcessor<map_msgs::ProjectedMap, FrameIdProcessor>::processMessage(map_msgs::ProjectedMap::Ptr &msg, FrameIdProcessor::ConstPtr &frame_id_processor);

template<>
void MessageProcessor<map_msgs::OccupancyGridUpdate, FrameIdProcessor>::processMessage(map_msgs::OccupancyGridUpdate::Ptr &msg, FrameIdProcessor::ConstPtr &frame_id_processor);

template<>
void MessageProcessor<map_msgs::ProjectedMapInfo, FrameIdProcessor>::processMessage(map_msgs::ProjectedMapInfo::Ptr &msg, FrameIdProcessor::ConstPtr &frame_id_processor);

template<>
void MessageProcessor<map_msgs::PointCloud2Update, FrameIdProcessor>::processMessage(map_msgs::PointCloud2Update::Ptr &msg, FrameIdProcessor::ConstPtr &frame_id_processor);

template<>
void ServiceProcessor<map_msgs::SaveMap, FrameIdProcessor>::processRequest(map_msgs::SaveMap::Request &req, FrameIdProcessor::ConstPtr &frame_id_processor);

template<>
void ServiceProcessor<map_msgs::SaveMap, FrameIdProcessor>::processResponse(map_msgs::SaveMap::Response &res, FrameIdProcessor::ConstPtr &frame_id_processor);

template<>
void ServiceProcessor<map_msgs::ProjectedMapsInfo, FrameIdProcessor>::processRequest(map_msgs::ProjectedMapsInfo::Request &req, FrameIdProcessor::ConstPtr &frame_id_processor);

template<>
void ServiceProcessor<map_msgs::ProjectedMapsInfo, FrameIdProcessor>::processResponse(map_msgs::ProjectedMapsInfo::Response &res, FrameIdProcessor::ConstPtr &frame_id_processor);

template<>
void ServiceProcessor<map_msgs::GetPointMap, FrameIdProcessor>::processRequest(map_msgs::GetPointMap::Request &req, FrameIdProcessor::ConstPtr &frame_id_processor);

template<>
void ServiceProcessor<map_msgs::GetPointMap, FrameIdProcessor>::processResponse(map_msgs::GetPointMap::Response &res, FrameIdProcessor::ConstPtr &frame_id_processor);

template<>
void ServiceProcessor<map_msgs::SetMapProjections, FrameIdProcessor>::processRequest(map_msgs::SetMapProjections::Request &req, FrameIdProcessor::ConstPtr &frame_id_processor);

template<>
void ServiceProcessor<map_msgs::SetMapProjections, FrameIdProcessor>::processResponse(map_msgs::SetMapProjections::Response &res, FrameIdProcessor::ConstPtr &frame_id_processor);

template<>
void ServiceProcessor<map_msgs::GetPointMapROI, FrameIdProcessor>::processRequest(map_msgs::GetPointMapROI::Request &req, FrameIdProcessor::ConstPtr &frame_id_processor);

template<>
void ServiceProcessor<map_msgs::GetPointMapROI, FrameIdProcessor>::processResponse(map_msgs::GetPointMapROI::Response &res, FrameIdProcessor::ConstPtr &frame_id_processor);

template<>
void ServiceProcessor<map_msgs::GetMapROI, FrameIdProcessor>::processRequest(map_msgs::GetMapROI::Request &req, FrameIdProcessor::ConstPtr &frame_id_processor);

template<>
void ServiceProcessor<map_msgs::GetMapROI, FrameIdProcessor>::processResponse(map_msgs::GetMapROI::Response &res, FrameIdProcessor::ConstPtr &frame_id_processor);

template<>
void MessageProcessor<map_msgs::ProjectedMap, TimeProcessor>::processMessage(map_msgs::ProjectedMap::Ptr &msg, TimeProcessor::ConstPtr &time_processor);

template<>
void MessageProcessor<map_msgs::OccupancyGridUpdate, TimeProcessor>::processMessage(map_msgs::OccupancyGridUpdate::Ptr &msg, TimeProcessor::ConstPtr &time_processor);

template<>
void MessageProcessor<map_msgs::ProjectedMapInfo, TimeProcessor>::processMessage(map_msgs::ProjectedMapInfo::Ptr &msg, TimeProcessor::ConstPtr &time_processor);

template<>
void MessageProcessor<map_msgs::PointCloud2Update, TimeProcessor>::processMessage(map_msgs::PointCloud2Update::Ptr &msg, TimeProcessor::ConstPtr &time_processor);

template<>
void ServiceProcessor<map_msgs::SaveMap, TimeProcessor>::processRequest(map_msgs::SaveMap::Request &req, TimeProcessor::ConstPtr &time_processor);

template<>
void ServiceProcessor<map_msgs::SaveMap, TimeProcessor>::processResponse(map_msgs::SaveMap::Response &res, TimeProcessor::ConstPtr &time_processor);

template<>
void ServiceProcessor<map_msgs::ProjectedMapsInfo, TimeProcessor>::processRequest(map_msgs::ProjectedMapsInfo::Request &req, TimeProcessor::ConstPtr &time_processor);

template<>
void ServiceProcessor<map_msgs::ProjectedMapsInfo, TimeProcessor>::processResponse(map_msgs::ProjectedMapsInfo::Response &res, TimeProcessor::ConstPtr &time_processor);

template<>
void ServiceProcessor<map_msgs::GetPointMap, TimeProcessor>::processRequest(map_msgs::GetPointMap::Request &req, TimeProcessor::ConstPtr &time_processor);

template<>
void ServiceProcessor<map_msgs::GetPointMap, TimeProcessor>::processResponse(map_msgs::GetPointMap::Response &res, TimeProcessor::ConstPtr &time_processor);

template<>
void ServiceProcessor<map_msgs::SetMapProjections, TimeProcessor>::processRequest(map_msgs::SetMapProjections::Request &req, TimeProcessor::ConstPtr &time_processor);

template<>
void ServiceProcessor<map_msgs::SetMapProjections, TimeProcessor>::processResponse(map_msgs::SetMapProjections::Response &res, TimeProcessor::ConstPtr &time_processor);

template<>
void ServiceProcessor<map_msgs::GetPointMapROI, TimeProcessor>::processRequest(map_msgs::GetPointMapROI::Request &req, TimeProcessor::ConstPtr &time_processor);

template<>
void ServiceProcessor<map_msgs::GetPointMapROI, TimeProcessor>::processResponse(map_msgs::GetPointMapROI::Response &res, TimeProcessor::ConstPtr &time_processor);

template<>
void ServiceProcessor<map_msgs::GetMapROI, TimeProcessor>::processRequest(map_msgs::GetMapROI::Request &req, TimeProcessor::ConstPtr &time_processor);

template<>
void ServiceProcessor<map_msgs::GetMapROI, TimeProcessor>::processResponse(map_msgs::GetMapROI::Response &res, TimeProcessor::ConstPtr &time_processor);

}  // namespace message_relay

#endif // MESSAGE_RELAY_MAP_MSGS_MESSAGE_PROCESSOR_H
