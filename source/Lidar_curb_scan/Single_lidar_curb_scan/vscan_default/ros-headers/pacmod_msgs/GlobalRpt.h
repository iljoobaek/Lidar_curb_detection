// Generated by gencpp from file pacmod_msgs/GlobalRpt.msg
// DO NOT EDIT!


#ifndef PACMOD_MSGS_MESSAGE_GLOBALRPT_H
#define PACMOD_MSGS_MESSAGE_GLOBALRPT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace pacmod_msgs
{
template <class ContainerAllocator>
struct GlobalRpt_
{
  typedef GlobalRpt_<ContainerAllocator> Type;

  GlobalRpt_()
    : header()
    , enabled(false)
    , override_active(false)
    , fault_active(false)
    , config_fault_active(false)
    , user_can_timeout(false)
    , brake_can_timeout(false)
    , steering_can_timeout(false)
    , vehicle_can_timeout(false)
    , subsystem_can_timeout(false)
    , user_can_read_errors(false)  {
    }
  GlobalRpt_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , enabled(false)
    , override_active(false)
    , fault_active(false)
    , config_fault_active(false)
    , user_can_timeout(false)
    , brake_can_timeout(false)
    , steering_can_timeout(false)
    , vehicle_can_timeout(false)
    , subsystem_can_timeout(false)
    , user_can_read_errors(false)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _enabled_type;
  _enabled_type enabled;

   typedef uint8_t _override_active_type;
  _override_active_type override_active;

   typedef uint8_t _fault_active_type;
  _fault_active_type fault_active;

   typedef uint8_t _config_fault_active_type;
  _config_fault_active_type config_fault_active;

   typedef uint8_t _user_can_timeout_type;
  _user_can_timeout_type user_can_timeout;

   typedef uint8_t _brake_can_timeout_type;
  _brake_can_timeout_type brake_can_timeout;

   typedef uint8_t _steering_can_timeout_type;
  _steering_can_timeout_type steering_can_timeout;

   typedef uint8_t _vehicle_can_timeout_type;
  _vehicle_can_timeout_type vehicle_can_timeout;

   typedef uint8_t _subsystem_can_timeout_type;
  _subsystem_can_timeout_type subsystem_can_timeout;

   typedef uint8_t _user_can_read_errors_type;
  _user_can_read_errors_type user_can_read_errors;





  typedef boost::shared_ptr< ::pacmod_msgs::GlobalRpt_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pacmod_msgs::GlobalRpt_<ContainerAllocator> const> ConstPtr;

}; // struct GlobalRpt_

typedef ::pacmod_msgs::GlobalRpt_<std::allocator<void> > GlobalRpt;

typedef boost::shared_ptr< ::pacmod_msgs::GlobalRpt > GlobalRptPtr;
typedef boost::shared_ptr< ::pacmod_msgs::GlobalRpt const> GlobalRptConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pacmod_msgs::GlobalRpt_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pacmod_msgs::GlobalRpt_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace pacmod_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'pacmod_msgs': ['/tmp/binarydeb/ros-kinetic-pacmod-msgs-3.0.1/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::pacmod_msgs::GlobalRpt_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pacmod_msgs::GlobalRpt_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pacmod_msgs::GlobalRpt_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pacmod_msgs::GlobalRpt_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pacmod_msgs::GlobalRpt_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pacmod_msgs::GlobalRpt_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pacmod_msgs::GlobalRpt_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e844957facaf4f6bfdea20a3ffdb048f";
  }

  static const char* value(const ::pacmod_msgs::GlobalRpt_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe844957facaf4f6bULL;
  static const uint64_t static_value2 = 0xfdea20a3ffdb048fULL;
};

template<class ContainerAllocator>
struct DataType< ::pacmod_msgs::GlobalRpt_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pacmod_msgs/GlobalRpt";
  }

  static const char* value(const ::pacmod_msgs::GlobalRpt_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pacmod_msgs::GlobalRpt_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n\
\n\
bool enabled                # Indicates whether any system on the PACMod is enabled or disabled.\n\
bool override_active        # Indicates whether an override has been triggered on any system.\n\
bool fault_active           # Indicates whether a fault is active on any system.\n\
bool config_fault_active    # Indicates whether the CONFIG.TXT file was read correctly\n\
bool user_can_timeout       # Indicates a timeout has been exceeded on the user CAN interface.\n\
bool brake_can_timeout      # Indicates a timeout has been exceeded on the brake CAN interface.\n\
bool steering_can_timeout   # Indicates a timeout has been exceeded on the steering CAN interface.\n\
bool vehicle_can_timeout    # Indicates a timeout has been exceeded on a vehicle CAN interface.\n\
bool subsystem_can_timeout  # Indicates a timeout has been exceeded when communicating with a PACMod subsystem.\n\
bool user_can_read_errors   # The number of read errors encoutered by the PACMod on the user CAN interface.\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::pacmod_msgs::GlobalRpt_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pacmod_msgs::GlobalRpt_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.enabled);
      stream.next(m.override_active);
      stream.next(m.fault_active);
      stream.next(m.config_fault_active);
      stream.next(m.user_can_timeout);
      stream.next(m.brake_can_timeout);
      stream.next(m.steering_can_timeout);
      stream.next(m.vehicle_can_timeout);
      stream.next(m.subsystem_can_timeout);
      stream.next(m.user_can_read_errors);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GlobalRpt_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pacmod_msgs::GlobalRpt_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pacmod_msgs::GlobalRpt_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "enabled: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.enabled);
    s << indent << "override_active: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.override_active);
    s << indent << "fault_active: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.fault_active);
    s << indent << "config_fault_active: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.config_fault_active);
    s << indent << "user_can_timeout: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.user_can_timeout);
    s << indent << "brake_can_timeout: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.brake_can_timeout);
    s << indent << "steering_can_timeout: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.steering_can_timeout);
    s << indent << "vehicle_can_timeout: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.vehicle_can_timeout);
    s << indent << "subsystem_can_timeout: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.subsystem_can_timeout);
    s << indent << "user_can_read_errors: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.user_can_read_errors);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PACMOD_MSGS_MESSAGE_GLOBALRPT_H
