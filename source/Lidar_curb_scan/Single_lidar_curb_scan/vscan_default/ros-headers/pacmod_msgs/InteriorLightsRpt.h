// Generated by gencpp from file pacmod_msgs/InteriorLightsRpt.msg
// DO NOT EDIT!


#ifndef PACMOD_MSGS_MESSAGE_INTERIORLIGHTSRPT_H
#define PACMOD_MSGS_MESSAGE_INTERIORLIGHTSRPT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace pacmod_msgs
{
template <class ContainerAllocator>
struct InteriorLightsRpt_
{
  typedef InteriorLightsRpt_<ContainerAllocator> Type;

  InteriorLightsRpt_()
    : header()
    , front_dome_lights_on(false)
    , front_dome_lights_on_is_valid(false)
    , rear_dome_lights_on(false)
    , rear_dome_lights_on_is_valid(false)
    , mood_lights_on(false)
    , mood_lights_on_is_valid(false)
    , dim_level(0)
    , dim_level_is_valid(false)  {
    }
  InteriorLightsRpt_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , front_dome_lights_on(false)
    , front_dome_lights_on_is_valid(false)
    , rear_dome_lights_on(false)
    , rear_dome_lights_on_is_valid(false)
    , mood_lights_on(false)
    , mood_lights_on_is_valid(false)
    , dim_level(0)
    , dim_level_is_valid(false)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _front_dome_lights_on_type;
  _front_dome_lights_on_type front_dome_lights_on;

   typedef uint8_t _front_dome_lights_on_is_valid_type;
  _front_dome_lights_on_is_valid_type front_dome_lights_on_is_valid;

   typedef uint8_t _rear_dome_lights_on_type;
  _rear_dome_lights_on_type rear_dome_lights_on;

   typedef uint8_t _rear_dome_lights_on_is_valid_type;
  _rear_dome_lights_on_is_valid_type rear_dome_lights_on_is_valid;

   typedef uint8_t _mood_lights_on_type;
  _mood_lights_on_type mood_lights_on;

   typedef uint8_t _mood_lights_on_is_valid_type;
  _mood_lights_on_is_valid_type mood_lights_on_is_valid;

   typedef uint8_t _dim_level_type;
  _dim_level_type dim_level;

   typedef uint8_t _dim_level_is_valid_type;
  _dim_level_is_valid_type dim_level_is_valid;



  enum {
    DIM_LEVEL_MIN = 0u,
    DIM_LEVEL_1 = 1u,
    DIM_LEVEL_2 = 2u,
    DIM_LEVEL_3 = 3u,
    DIM_LEVEL_4 = 4u,
    DIM_LEVEL_5 = 5u,
    DIM_LEVEL_6 = 6u,
    DIM_LEVEL_7 = 7u,
    DIM_LEVEL_8 = 8u,
    DIM_LEVEL_9 = 9u,
    DIM_LEVEL_10 = 10u,
    DIM_LEVEL_11 = 11u,
    DIM_LEVEL_MAX = 12u,
  };


  typedef boost::shared_ptr< ::pacmod_msgs::InteriorLightsRpt_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pacmod_msgs::InteriorLightsRpt_<ContainerAllocator> const> ConstPtr;

}; // struct InteriorLightsRpt_

typedef ::pacmod_msgs::InteriorLightsRpt_<std::allocator<void> > InteriorLightsRpt;

typedef boost::shared_ptr< ::pacmod_msgs::InteriorLightsRpt > InteriorLightsRptPtr;
typedef boost::shared_ptr< ::pacmod_msgs::InteriorLightsRpt const> InteriorLightsRptConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pacmod_msgs::InteriorLightsRpt_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pacmod_msgs::InteriorLightsRpt_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace pacmod_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'pacmod_msgs': ['/tmp/binarydeb/ros-kinetic-pacmod-msgs-3.0.1/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::pacmod_msgs::InteriorLightsRpt_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pacmod_msgs::InteriorLightsRpt_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pacmod_msgs::InteriorLightsRpt_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pacmod_msgs::InteriorLightsRpt_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pacmod_msgs::InteriorLightsRpt_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pacmod_msgs::InteriorLightsRpt_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pacmod_msgs::InteriorLightsRpt_<ContainerAllocator> >
{
  static const char* value()
  {
    return "edb83c466d141d95fcc059ad99141e5e";
  }

  static const char* value(const ::pacmod_msgs::InteriorLightsRpt_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xedb83c466d141d95ULL;
  static const uint64_t static_value2 = 0xfcc059ad99141e5eULL;
};

template<class ContainerAllocator>
struct DataType< ::pacmod_msgs::InteriorLightsRpt_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pacmod_msgs/InteriorLightsRpt";
  }

  static const char* value(const ::pacmod_msgs::InteriorLightsRpt_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pacmod_msgs::InteriorLightsRpt_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n\
\n\
bool front_dome_lights_on\n\
bool front_dome_lights_on_is_valid\n\
bool rear_dome_lights_on\n\
bool rear_dome_lights_on_is_valid\n\
bool mood_lights_on\n\
bool mood_lights_on_is_valid\n\
uint8 dim_level\n\
bool dim_level_is_valid\n\
\n\
uint8 DIM_LEVEL_MIN = 0\n\
uint8 DIM_LEVEL_1 = 1\n\
uint8 DIM_LEVEL_2 = 2\n\
uint8 DIM_LEVEL_3 = 3\n\
uint8 DIM_LEVEL_4 = 4\n\
uint8 DIM_LEVEL_5 = 5\n\
uint8 DIM_LEVEL_6 = 6\n\
uint8 DIM_LEVEL_7 = 7\n\
uint8 DIM_LEVEL_8 = 8\n\
uint8 DIM_LEVEL_9 = 9\n\
uint8 DIM_LEVEL_10 = 10\n\
uint8 DIM_LEVEL_11 = 11\n\
uint8 DIM_LEVEL_MAX = 12\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::pacmod_msgs::InteriorLightsRpt_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pacmod_msgs::InteriorLightsRpt_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.front_dome_lights_on);
      stream.next(m.front_dome_lights_on_is_valid);
      stream.next(m.rear_dome_lights_on);
      stream.next(m.rear_dome_lights_on_is_valid);
      stream.next(m.mood_lights_on);
      stream.next(m.mood_lights_on_is_valid);
      stream.next(m.dim_level);
      stream.next(m.dim_level_is_valid);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct InteriorLightsRpt_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pacmod_msgs::InteriorLightsRpt_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pacmod_msgs::InteriorLightsRpt_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "front_dome_lights_on: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.front_dome_lights_on);
    s << indent << "front_dome_lights_on_is_valid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.front_dome_lights_on_is_valid);
    s << indent << "rear_dome_lights_on: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.rear_dome_lights_on);
    s << indent << "rear_dome_lights_on_is_valid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.rear_dome_lights_on_is_valid);
    s << indent << "mood_lights_on: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.mood_lights_on);
    s << indent << "mood_lights_on_is_valid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.mood_lights_on_is_valid);
    s << indent << "dim_level: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.dim_level);
    s << indent << "dim_level_is_valid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.dim_level_is_valid);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PACMOD_MSGS_MESSAGE_INTERIORLIGHTSRPT_H
