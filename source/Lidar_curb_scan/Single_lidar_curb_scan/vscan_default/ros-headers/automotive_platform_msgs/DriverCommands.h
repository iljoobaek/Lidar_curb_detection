// Generated by gencpp from file automotive_platform_msgs/DriverCommands.msg
// DO NOT EDIT!


#ifndef AUTOMOTIVE_PLATFORM_MSGS_MESSAGE_DRIVERCOMMANDS_H
#define AUTOMOTIVE_PLATFORM_MSGS_MESSAGE_DRIVERCOMMANDS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace automotive_platform_msgs
{
template <class ContainerAllocator>
struct DriverCommands_
{
  typedef DriverCommands_<ContainerAllocator> Type;

  DriverCommands_()
    : msg_counter(0)
    , engage(0)
    , disengage(0)
    , speed_up(0)
    , slow_down(0)
    , further(0)
    , closer(0)
    , right_turn(0)
    , left_turn(0)  {
    }
  DriverCommands_(const ContainerAllocator& _alloc)
    : msg_counter(0)
    , engage(0)
    , disengage(0)
    , speed_up(0)
    , slow_down(0)
    , further(0)
    , closer(0)
    , right_turn(0)
    , left_turn(0)  {
  (void)_alloc;
    }



   typedef uint8_t _msg_counter_type;
  _msg_counter_type msg_counter;

   typedef uint16_t _engage_type;
  _engage_type engage;

   typedef uint16_t _disengage_type;
  _disengage_type disengage;

   typedef uint16_t _speed_up_type;
  _speed_up_type speed_up;

   typedef uint16_t _slow_down_type;
  _slow_down_type slow_down;

   typedef uint16_t _further_type;
  _further_type further;

   typedef uint16_t _closer_type;
  _closer_type closer;

   typedef uint16_t _right_turn_type;
  _right_turn_type right_turn;

   typedef uint16_t _left_turn_type;
  _left_turn_type left_turn;





  typedef boost::shared_ptr< ::automotive_platform_msgs::DriverCommands_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::automotive_platform_msgs::DriverCommands_<ContainerAllocator> const> ConstPtr;

}; // struct DriverCommands_

typedef ::automotive_platform_msgs::DriverCommands_<std::allocator<void> > DriverCommands;

typedef boost::shared_ptr< ::automotive_platform_msgs::DriverCommands > DriverCommandsPtr;
typedef boost::shared_ptr< ::automotive_platform_msgs::DriverCommands const> DriverCommandsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::automotive_platform_msgs::DriverCommands_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::automotive_platform_msgs::DriverCommands_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace automotive_platform_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'automotive_platform_msgs': ['/tmp/binarydeb/ros-kinetic-automotive-platform-msgs-3.0.3/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::automotive_platform_msgs::DriverCommands_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::automotive_platform_msgs::DriverCommands_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::automotive_platform_msgs::DriverCommands_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::automotive_platform_msgs::DriverCommands_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::automotive_platform_msgs::DriverCommands_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::automotive_platform_msgs::DriverCommands_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::automotive_platform_msgs::DriverCommands_<ContainerAllocator> >
{
  static const char* value()
  {
    return "612c1e59d97aa5ea3be1c2ad2b26dbc7";
  }

  static const char* value(const ::automotive_platform_msgs::DriverCommands_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x612c1e59d97aa5eaULL;
  static const uint64_t static_value2 = 0x3be1c2ad2b26dbc7ULL;
};

template<class ContainerAllocator>
struct DataType< ::automotive_platform_msgs::DriverCommands_<ContainerAllocator> >
{
  static const char* value()
  {
    return "automotive_platform_msgs/DriverCommands";
  }

  static const char* value(const ::automotive_platform_msgs::DriverCommands_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::automotive_platform_msgs::DriverCommands_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Driver Commands Message\n\
# Contains commands from the driver to the autonomy system\n\
\n\
uint8 msg_counter   # Increments each time a command is sent\n\
                    # An acknowledge message should be published with this value\n\
\n\
uint16 engage       # Engage auto\n\
uint16 disengage    # Disengage auto\n\
uint16 speed_up     # Increase speed set point\n\
uint16 slow_down    # Decrease speed set point\n\
uint16 further      # Increase distance set point\n\
uint16 closer       # Decrease distance set point\n\
uint16 right_turn   # Right turn signal\n\
uint16 left_turn    # Left turn signal\n\
\n\
";
  }

  static const char* value(const ::automotive_platform_msgs::DriverCommands_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::automotive_platform_msgs::DriverCommands_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.msg_counter);
      stream.next(m.engage);
      stream.next(m.disengage);
      stream.next(m.speed_up);
      stream.next(m.slow_down);
      stream.next(m.further);
      stream.next(m.closer);
      stream.next(m.right_turn);
      stream.next(m.left_turn);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DriverCommands_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::automotive_platform_msgs::DriverCommands_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::automotive_platform_msgs::DriverCommands_<ContainerAllocator>& v)
  {
    s << indent << "msg_counter: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.msg_counter);
    s << indent << "engage: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.engage);
    s << indent << "disengage: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.disengage);
    s << indent << "speed_up: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.speed_up);
    s << indent << "slow_down: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.slow_down);
    s << indent << "further: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.further);
    s << indent << "closer: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.closer);
    s << indent << "right_turn: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.right_turn);
    s << indent << "left_turn: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.left_turn);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AUTOMOTIVE_PLATFORM_MSGS_MESSAGE_DRIVERCOMMANDS_H
