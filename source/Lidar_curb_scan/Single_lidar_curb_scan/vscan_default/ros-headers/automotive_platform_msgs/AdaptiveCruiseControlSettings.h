// Generated by gencpp from file automotive_platform_msgs/AdaptiveCruiseControlSettings.msg
// DO NOT EDIT!


#ifndef AUTOMOTIVE_PLATFORM_MSGS_MESSAGE_ADAPTIVECRUISECONTROLSETTINGS_H
#define AUTOMOTIVE_PLATFORM_MSGS_MESSAGE_ADAPTIVECRUISECONTROLSETTINGS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace automotive_platform_msgs
{
template <class ContainerAllocator>
struct AdaptiveCruiseControlSettings_
{
  typedef AdaptiveCruiseControlSettings_<ContainerAllocator> Type;

  AdaptiveCruiseControlSettings_()
    : header()
    , set_speed(0.0)
    , following_spot(0)
    , min_percent(0.0)
    , step_percent(0.0)
    , cipv_percent(0.0)
    , max_distance(0.0)  {
    }
  AdaptiveCruiseControlSettings_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , set_speed(0.0)
    , following_spot(0)
    , min_percent(0.0)
    , step_percent(0.0)
    , cipv_percent(0.0)
    , max_distance(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef float _set_speed_type;
  _set_speed_type set_speed;

   typedef uint16_t _following_spot_type;
  _following_spot_type following_spot;

   typedef float _min_percent_type;
  _min_percent_type min_percent;

   typedef float _step_percent_type;
  _step_percent_type step_percent;

   typedef float _cipv_percent_type;
  _cipv_percent_type cipv_percent;

   typedef float _max_distance_type;
  _max_distance_type max_distance;





  typedef boost::shared_ptr< ::automotive_platform_msgs::AdaptiveCruiseControlSettings_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::automotive_platform_msgs::AdaptiveCruiseControlSettings_<ContainerAllocator> const> ConstPtr;

}; // struct AdaptiveCruiseControlSettings_

typedef ::automotive_platform_msgs::AdaptiveCruiseControlSettings_<std::allocator<void> > AdaptiveCruiseControlSettings;

typedef boost::shared_ptr< ::automotive_platform_msgs::AdaptiveCruiseControlSettings > AdaptiveCruiseControlSettingsPtr;
typedef boost::shared_ptr< ::automotive_platform_msgs::AdaptiveCruiseControlSettings const> AdaptiveCruiseControlSettingsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::automotive_platform_msgs::AdaptiveCruiseControlSettings_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::automotive_platform_msgs::AdaptiveCruiseControlSettings_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace automotive_platform_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'automotive_platform_msgs': ['/tmp/binarydeb/ros-kinetic-automotive-platform-msgs-3.0.3/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::automotive_platform_msgs::AdaptiveCruiseControlSettings_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::automotive_platform_msgs::AdaptiveCruiseControlSettings_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::automotive_platform_msgs::AdaptiveCruiseControlSettings_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::automotive_platform_msgs::AdaptiveCruiseControlSettings_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::automotive_platform_msgs::AdaptiveCruiseControlSettings_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::automotive_platform_msgs::AdaptiveCruiseControlSettings_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::automotive_platform_msgs::AdaptiveCruiseControlSettings_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0b4d1a2cc78ca8e10ffb5792b0e4db08";
  }

  static const char* value(const ::automotive_platform_msgs::AdaptiveCruiseControlSettings_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0b4d1a2cc78ca8e1ULL;
  static const uint64_t static_value2 = 0x0ffb5792b0e4db08ULL;
};

template<class ContainerAllocator>
struct DataType< ::automotive_platform_msgs::AdaptiveCruiseControlSettings_<ContainerAllocator> >
{
  static const char* value()
  {
    return "automotive_platform_msgs/AdaptiveCruiseControlSettings";
  }

  static const char* value(const ::automotive_platform_msgs::AdaptiveCruiseControlSettings_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::automotive_platform_msgs::AdaptiveCruiseControlSettings_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Adaptive Cruise Control Settings Message\n\
# Contains the current settings/status of ACC\n\
\n\
std_msgs/Header header\n\
\n\
float32 set_speed       # Current speed set point (m/sec)\n\
\n\
uint16 following_spot   # Discrete following location\n\
                        # 0 = following distance is the minimum allowed distance\n\
                        # n = following distance is the maximum allowed distance\n\
                        #      where (n + 1) is the number of allowed distances\n\
\n\
float32 min_percent     # Minimum distance relative to maximum allowed distance\n\
                        # 0 to 1.0\n\
\n\
float32 step_percent    # Distance between spots relative to maximum allowed\n\
                        # distance\n\
                        # 0 to 1.0\n\
\n\
float32 cipv_percent    # Where CIPV is relative to the maximum allowed distance\n\
                        # 0 = there isn't a detected CIPV\n\
                        # 1.0 = the CIPV is at the maximum allowed distance\n\
                        # The maximum allowed distance varies with speed\n\
\n\
float32 max_distance    # The distance corresponding to 1.0 percent (meters)\n\
\n\
# So if the driver wants to maintain the greatest separation behind the CIPV,\n\
# he can press the increase distance button over and over until the distance\n\
# set point reaches the maximum allowed distance.  If there are 5 allowed\n\
# following distance set points, then following_spot will equal 4.\n\
\n\
# If a Closest In Path Vehicle is detected at this distance then the\n\
# cipv_percent will be 1.0.\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::automotive_platform_msgs::AdaptiveCruiseControlSettings_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::automotive_platform_msgs::AdaptiveCruiseControlSettings_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.set_speed);
      stream.next(m.following_spot);
      stream.next(m.min_percent);
      stream.next(m.step_percent);
      stream.next(m.cipv_percent);
      stream.next(m.max_distance);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct AdaptiveCruiseControlSettings_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::automotive_platform_msgs::AdaptiveCruiseControlSettings_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::automotive_platform_msgs::AdaptiveCruiseControlSettings_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "set_speed: ";
    Printer<float>::stream(s, indent + "  ", v.set_speed);
    s << indent << "following_spot: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.following_spot);
    s << indent << "min_percent: ";
    Printer<float>::stream(s, indent + "  ", v.min_percent);
    s << indent << "step_percent: ";
    Printer<float>::stream(s, indent + "  ", v.step_percent);
    s << indent << "cipv_percent: ";
    Printer<float>::stream(s, indent + "  ", v.cipv_percent);
    s << indent << "max_distance: ";
    Printer<float>::stream(s, indent + "  ", v.max_distance);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AUTOMOTIVE_PLATFORM_MSGS_MESSAGE_ADAPTIVECRUISECONTROLSETTINGS_H
