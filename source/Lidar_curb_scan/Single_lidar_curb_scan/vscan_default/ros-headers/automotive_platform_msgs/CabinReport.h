// Generated by gencpp from file automotive_platform_msgs/CabinReport.msg
// DO NOT EDIT!


#ifndef AUTOMOTIVE_PLATFORM_MSGS_MESSAGE_CABINREPORT_H
#define AUTOMOTIVE_PLATFORM_MSGS_MESSAGE_CABINREPORT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace automotive_platform_msgs
{
template <class ContainerAllocator>
struct CabinReport_
{
  typedef CabinReport_<ContainerAllocator> Type;

  CabinReport_()
    : header()
    , door_open_front_right(false)
    , door_open_front_left(false)
    , door_open_rear_right(false)
    , door_open_rear_left(false)
    , hood_open(false)
    , trunk_open(false)
    , passenger_present(false)
    , passenger_airbag_enabled(false)
    , seatbelt_engaged_driver(false)
    , seatbelt_engaged_passenger(false)  {
    }
  CabinReport_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , door_open_front_right(false)
    , door_open_front_left(false)
    , door_open_rear_right(false)
    , door_open_rear_left(false)
    , hood_open(false)
    , trunk_open(false)
    , passenger_present(false)
    , passenger_airbag_enabled(false)
    , seatbelt_engaged_driver(false)
    , seatbelt_engaged_passenger(false)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _door_open_front_right_type;
  _door_open_front_right_type door_open_front_right;

   typedef uint8_t _door_open_front_left_type;
  _door_open_front_left_type door_open_front_left;

   typedef uint8_t _door_open_rear_right_type;
  _door_open_rear_right_type door_open_rear_right;

   typedef uint8_t _door_open_rear_left_type;
  _door_open_rear_left_type door_open_rear_left;

   typedef uint8_t _hood_open_type;
  _hood_open_type hood_open;

   typedef uint8_t _trunk_open_type;
  _trunk_open_type trunk_open;

   typedef uint8_t _passenger_present_type;
  _passenger_present_type passenger_present;

   typedef uint8_t _passenger_airbag_enabled_type;
  _passenger_airbag_enabled_type passenger_airbag_enabled;

   typedef uint8_t _seatbelt_engaged_driver_type;
  _seatbelt_engaged_driver_type seatbelt_engaged_driver;

   typedef uint8_t _seatbelt_engaged_passenger_type;
  _seatbelt_engaged_passenger_type seatbelt_engaged_passenger;





  typedef boost::shared_ptr< ::automotive_platform_msgs::CabinReport_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::automotive_platform_msgs::CabinReport_<ContainerAllocator> const> ConstPtr;

}; // struct CabinReport_

typedef ::automotive_platform_msgs::CabinReport_<std::allocator<void> > CabinReport;

typedef boost::shared_ptr< ::automotive_platform_msgs::CabinReport > CabinReportPtr;
typedef boost::shared_ptr< ::automotive_platform_msgs::CabinReport const> CabinReportConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::automotive_platform_msgs::CabinReport_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::automotive_platform_msgs::CabinReport_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace automotive_platform_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'automotive_platform_msgs': ['/tmp/binarydeb/ros-kinetic-automotive-platform-msgs-3.0.3/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::automotive_platform_msgs::CabinReport_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::automotive_platform_msgs::CabinReport_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::automotive_platform_msgs::CabinReport_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::automotive_platform_msgs::CabinReport_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::automotive_platform_msgs::CabinReport_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::automotive_platform_msgs::CabinReport_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::automotive_platform_msgs::CabinReport_<ContainerAllocator> >
{
  static const char* value()
  {
    return "63611b37cea8020053088e5a34aead53";
  }

  static const char* value(const ::automotive_platform_msgs::CabinReport_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x63611b37cea80200ULL;
  static const uint64_t static_value2 = 0x53088e5a34aead53ULL;
};

template<class ContainerAllocator>
struct DataType< ::automotive_platform_msgs::CabinReport_<ContainerAllocator> >
{
  static const char* value()
  {
    return "automotive_platform_msgs/CabinReport";
  }

  static const char* value(const ::automotive_platform_msgs::CabinReport_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::automotive_platform_msgs::CabinReport_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Status of vehicle cabin sensors\n\
std_msgs/Header header\n\
\n\
# The door positions below are from the point of view of someone sitting\n\
# in the vehicle, facing the X positive direction. Not using driver/passenger\n\
# since this is different in left- vs right-hand drive vehicles.\n\
bool door_open_front_right       # Status of the door nearest the front of the vehicle in the Y+ direction\n\
bool door_open_front_left        # Status of the door nearest the front of the vehicle in the Y- direction\n\
bool door_open_rear_right        # Status of the door nearest the rear of the vehicle in the Y+ direction\n\
bool door_open_rear_left         # Status of the door nearest the rear of the vehicle in the Y- direction\n\
bool hood_open                   # Status of the front compartment cover\n\
bool trunk_open                  # Status of the rear compartment cover\n\
\n\
bool passenger_present           # Whether or not a passenger is detected in the front non-driving seat\n\
bool passenger_airbag_enabled    # Whether or not the passenger-side airbag is enabled\n\
\n\
bool seatbelt_engaged_driver     # Whether or not the seatbelt for the driver's seat is buckled\n\
bool seatbelt_engaged_passenger  # Whether or not the seatbelt for the passenger's seat is buckled\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::automotive_platform_msgs::CabinReport_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::automotive_platform_msgs::CabinReport_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.door_open_front_right);
      stream.next(m.door_open_front_left);
      stream.next(m.door_open_rear_right);
      stream.next(m.door_open_rear_left);
      stream.next(m.hood_open);
      stream.next(m.trunk_open);
      stream.next(m.passenger_present);
      stream.next(m.passenger_airbag_enabled);
      stream.next(m.seatbelt_engaged_driver);
      stream.next(m.seatbelt_engaged_passenger);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CabinReport_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::automotive_platform_msgs::CabinReport_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::automotive_platform_msgs::CabinReport_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "door_open_front_right: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.door_open_front_right);
    s << indent << "door_open_front_left: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.door_open_front_left);
    s << indent << "door_open_rear_right: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.door_open_rear_right);
    s << indent << "door_open_rear_left: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.door_open_rear_left);
    s << indent << "hood_open: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.hood_open);
    s << indent << "trunk_open: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.trunk_open);
    s << indent << "passenger_present: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.passenger_present);
    s << indent << "passenger_airbag_enabled: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.passenger_airbag_enabled);
    s << indent << "seatbelt_engaged_driver: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.seatbelt_engaged_driver);
    s << indent << "seatbelt_engaged_passenger: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.seatbelt_engaged_passenger);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AUTOMOTIVE_PLATFORM_MSGS_MESSAGE_CABINREPORT_H
